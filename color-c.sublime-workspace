{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"map_",
				"selected_map_index"
			],
			[
				"node",
				"node_color"
			],
			[
				"start_",
				"start_index"
			],
			[
				"Work",
				"WorkQueuePendingJobCount"
			],
			[
				"mapge",
				"map_generation_work_queue"
			],
			[
				"generat",
				"generation_finished"
			],
			[
				"resta",
				"restart_count_layout"
			],
			[
				"force",
				"force_params"
			],
			[
				"Gneer",
				"GenerateNodeGraph_Params"
			],
			[
				"Gener",
				"GenerateNodeGraph_Params"
			],
			[
				"Edge",
				"EdgeAlreadyExists"
			],
			[
				"map_gen",
				"map_generation_work_queue"
			],
			[
				"Genre",
				"GenerateNodeGraph_Params"
			],
			[
				"mute",
				"mutex_handle"
			],
			[
				"Semaphore",
				"ReleaseSemaphore"
			],
			[
				"next_entr",
				"next_entry_to_read"
			],
			[
				"entry",
				"entry_data_buffer"
			],
			[
				"next_in",
				"next_index_to_read"
			],
			[
				"size",
				"size_in_bytes"
			],
			[
				"RingBu",
				"RingBufferBytesRemaining"
			],
			[
				"next",
				"next_entry_to_write"
			],
			[
				"Next",
				"NextEntryToAdd"
			],
			[
				"NextEntry",
				"NextEntryToDo"
			],
			[
				"Inter",
				"InterlockedIncrement"
			],
			[
				"original",
				"original_next_entry_to_add"
			],
			[
				"new_next",
				"new_next_entry_to_add"
			],
			[
				"origin",
				"original_next_entry_to_add"
			],
			[
				"NextE",
				"NextEntryToAdd"
			],
			[
				"or",
				"original_next_entry_to_do"
			],
			[
				"Token",
				"TokenMatchesString"
			],
			[
				"tmp",
				"temp_arena"
			],
			[
				"Crate",
				"CreateArrayFromArena"
			],
			[
				"Create",
				"CreateArrayFromArena"
			],
			[
				"per",
				"per_frame_arena"
			],
			[
				"Arena",
				"AllocArena"
			],
			[
				"padd",
				"padded_rect"
			],
			[
				"generate",
				"generate_node_graph_params"
			],
			[
				"function",
				"function_params"
			],
			[
				"funct",
				"function_params"
			],
			[
				"thread",
				"thread_id"
			],
			[
				"Node",
				"NodeGraphParams"
			],
			[
				"Draw",
				"DrawUnfilledRect"
			],
			[
				"ForceSim",
				"ForceSimState"
			],
			[
				"aligne",
				"align_center"
			],
			[
				"grph",
				"graph_fully_connected"
			],
			[
				"fully",
				"graph_fully_connected"
			],
			[
				"indi",
				"indices_to_search"
			],
			[
				"connec",
				"connected_edges"
			],
			[
				"generation",
				"generation_finished"
			],
			[
				"gener",
				"generation_finished"
			],
			[
				"Rand",
				"RandomU32"
			],
			[
				"fdg",
				"fdg_edge_length"
			],
			[
				"camera",
				"camera_offset"
			],
			[
				"nodes",
				"nodes"
			],
			[
				"main",
				"main_path_node_count"
			],
			[
				"edges",
				"edges"
			],
			[
				"align",
				"aligned_rect"
			],
			[
				"edg",
				"edge_indices"
			],
			[
				"pos",
				"pos_average"
			],
			[
				"color",
				"color_shader"
			],
			[
				"iters",
				"iters_per_tick"
			],
			[
				"Mouse",
				"MouseInRect"
			],
			[
				"test",
				"test_node"
			],
			[
				"option",
				"option_being_modified"
			],
			[
				"format",
				"formatted_string"
			],
			[
				"real_",
				"real_out_file"
			],
			[
				"taregt",
				"target_string"
			],
			[
				"KeyBind",
				"KeyBindToVirtualKey"
			],
			[
				"String",
				"StringFromCString"
			],
			[
				"exit",
				"exit_requested"
			],
			[
				"Game",
				"GameState"
			],
			[
				"curre",
				"current_state"
			],
			[
				"mainmenu",
				"mainmenu_state"
			],
			[
				"align_top",
				"align_topcenter"
			],
			[
				"selectedunit",
				"selected_unit_id"
			],
			[
				"hovered_uint",
				"hovered_unit_id"
			],
			[
				"hovered_ability",
				"hovered_ability"
			],
			[
				"Tier",
				"DetermineAbilityTier"
			],
			[
				"Select",
				"ValidSelectionUnitSet"
			],
			[
				"Determin",
				"DetermineAbilityTier"
			],
			[
				"null",
				"null_unit_id"
			],
			[
				"prev",
				"preview_events"
			],
			[
				"Set",
				"SetDrawDepth"
			],
			[
				"target_ind",
				"target_index_in_battle_units"
			],
			[
				"char_",
				"char_verts"
			],
			[
				"align_bottom",
				"align_bottomcenter"
			],
			[
				"align_bot",
				"align_bottomcenter"
			],
			[
				"Array",
				"ArrayCount"
			],
			[
				"Button",
				"ButtonResponse"
			],
			[
				"Valid",
				"ValidAbility"
			],
			[
				"platf",
				"platform_input"
			],
			[
				"last",
				"last_frame_hovered_unit_id"
			],
			[
				"hovered_",
				"hovered_unit_id"
			],
			[
				"SetSelec",
				"SetSelectedAbility"
			],
			[
				"SetSe",
				"SetSelectedUnit"
			],
			[
				"Change",
				"ChangeSelectedUnit"
			],
			[
				"preview",
				"preview_damage_timer"
			],
			[
				"Deterin",
				"DetermineAbilityTier"
			],
			[
				"ability",
				"ability_id"
			],
			[
				"Get",
				"GetUnitByID"
			],
			[
				"GetSc",
				"GetUnitSchematicFromId"
			],
			[
				"unit_sch",
				"unit_schematic_id"
			],
			[
				"DrawEnemyI",
				"DrawEnemyIntentThoughtBubble"
			],
			[
				"Vlaid",
				"ValidUnit"
			],
			[
				"hoveredunit",
				"hovered_unit_id"
			],
			[
				"sel",
				"selected_target"
			],
			[
				"selcete",
				"selected_target_id"
			],
			[
				"selected",
				"selected_target"
			],
			[
				"seleted",
				"selected_ability"
			],
			[
				"select",
				"selected_ability"
			],
			[
				"abili",
				"abilities"
			],
			[
				"selecte",
				"selected_unit"
			],
			[
				"selec",
				"selected_unit-"
			],
			[
				"adju",
				"adjusted_gift_amount"
			],
			[
				"events",
				"events_initial_size"
			],
			[
				"Conf",
				"ConfirmNextToken"
			],
			[
				"Toke",
				"TokenType_"
			],
			[
				"TokenT",
				"TokenType_"
			],
			[
				"base_",
				"base_type_token"
			],
			[
				"baset",
				"base_type_token"
			],
			[
				"Close",
				"CloseAngleBracket"
			],
			[
				"Confirm",
				"ConfirmTokenType_"
			],
			[
				"is_",
				"is_pointer"
			],
			[
				"CloseSq",
				"CloseSquareBracket"
			],
			[
				"OpenSq",
				"OpenSquigglyBracket"
			],
			[
				"Toek",
				"TokenType_"
			],
			[
				"Open",
				"OpenSquigglyBracket"
			],
			[
				"TokenTy",
				"CheckNextTokenType_"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"campaign.h\"\n\n#include \"random.h\"\n#include \"generate_node_graph_params.h\"\n\n// bool\n// GraphIsFullyConnected(Campaign *campaign)\n// {\n//     //Node &root =  campaign->nodes[0];\n\n//     Array<int> indices_to_search = CreateTempArray<int>(20);\n//     indices_to_search += 0; // add \"root\"\n\n//     Array<int> searched_indices = CreateTempArray<int>(20);\n//     Array<Edge> connected_edges = CreateTempArray<Edge>(10);\n//     //for(int i=0; i<campaign->edges.count; ++i)\n//     while(indices_to_search.count > 0)\n//     {\n//         ClearArray(&connected_edges);\n//         int this_index = indices_to_search[indices_to_search.count-1];\n//         indices_to_search.count -= 1;\n//         searched_indices += this_index;\n//         for(auto edge : campaign->edges)\n//         {\n//             if(this_index == edge.indices[0])\n//             {\n//                 //connected_edges += edge;\n//                 if(     !ElementInArray(&searched_indices, edge.indices[1])\n//                     and !ElementInArray(&indices_to_search, edge.indices[1]))\n//                 {\n//                     indices_to_search += edge.indices[1];\n//                 }\n//             }\n//             else if(this_index == edge.indices[1])\n//             {\n//                 //connected_edges += edge;\n//                 if(    !ElementInArray(&searched_indices, edge.indices[0])\n//                    and !ElementInArray(&indices_to_search, edge.indices[0]))\n//                 {\n//                     indices_to_search += edge.indices[0];\n//                 }\n//             }\n//         }\n//     }\n\n//     campaign->graph_fully_connected = (searched_indices.count == campaign->nodes.count);\n//     return campaign->graph_fully_connected;\n// }\n\n// Node *\n// AddNode(Campaign *campaign, Node node, Array<int> edge_indices)\n// {\n//     int new_node_index = campaign->nodes.count;\n//     Node *new_node = Append(&campaign->nodes, node);\n\n//     if(edge_indices.data)\n//     {\n//         for(int existing_node_index : edge_indices)\n//         {\n//             Edge edge;\n//             edge.indices[0] = existing_node_index;\n//             edge.indices[1] = new_node_index;\n//             campaign->edges += edge;\n//         }\n//     }\n\n//     return new_node;\n// }\n\n// void\n// GenerateRandomTree(Campaign *campaign)\n// {\n//     TIMED_BLOCK;\n\n//     ClearArray(&campaign->nodes);\n//     ClearArray(&campaign->edges);\n//     campaign->drag_start_index = -1;\n\n//     u32 node_count = RandomU32(8, 16);\n//     ResizeArray(&campaign->nodes, node_count);\n\n//     for(int i=0; i<node_count; ++i)\n//     {\n\n//         u32 node_x = RandomU32(300, ClampFloatToU32(game->window_size.x)-300);\n//         u32 node_y = RandomU32(300, ClampFloatToU32(game->window_size.y)-300);\n\n//         Node node = {\n//             .pos = {(float)node_x, (float)node_y},\n//             .vel = {0.f,0.f}\n//         };\n\n//         campaign->nodes += node;\n//     }\n\n//     Array<Edge> edge_permutations = CreateTempArray<Edge>(100);\n//     for(int i=0; i<node_count; ++i)\n//     {\n//         for(int j=i; j<node_count; ++j)\n//         {\n//             Edge edge;\n//             edge.indices[0] = i;\n//             edge.indices[1] = j;\n//             edge_permutations += edge;\n//         }\n//     }\n\n//     int max_edge_count = 3;\n//     Array<int> edges_per_node = CreateTempArray<int>(node_count);\n//     for(int i=0; i<node_count; ++i) edges_per_node += 0;\n\n//     for(auto edge : edge_permutations)\n//     {\n//         int p = RandomU32(0,5);\n//         int a_index = edge.indices[0];\n//         int b_index = edge.indices[1];\n//         if(p == 0 and edges_per_node[a_index] < max_edge_count and edges_per_node[b_index] < max_edge_count)\n//         {\n//             campaign->edges += edge;\n//             ++edges_per_node[a_index];\n//             ++edges_per_node[b_index];\n//         }\n//     }\n\n//     int nodes_without_edges = 0;\n//     for(int v : edges_per_node)\n//     {\n//         if(v == 0) ++nodes_without_edges;\n//     }\n\n//     if(nodes_without_edges > node_count/4)\n//     {\n//         GenerateRandomTree(campaign);\n//     }\n// }\n\n// void\n// GenerateTreeFromMainBranch(Campaign *campaign)\n// {\n//     ++campaign->generation_count;\n\n//     ClearArray(&campaign->nodes);\n//     ClearArray(&campaign->edges);\n//     campaign->drag_start_index = -1;\n\n//     int m = 2;\n\n//     // Main path\n//     u32 main_path_node_count = RandomU32(m*6,m*8);\n//     ResizeArray(&campaign->nodes, main_path_node_count);\n//     for(int i=0; i<main_path_node_count; ++i)\n//     {\n//         Node node = {\n//             .pos = {400.f + 10.f*i, 450.f},\n//             .vel = {0.f,0.f}//{(float)RandomU32(0,2)-1, (float)RandomU32(0,2)-1}\n//         };\n//         campaign->nodes += node;\n//     }\n\n//     campaign->end_index = campaign->nodes.count-1;\n\n//     for(int i=1; i<campaign->nodes.count; ++i)\n//     {\n//         Edge edge = {};\n//         edge.indices[0] = i-1;\n//         edge.indices[1] = i;\n//         edge.rest_length = c::fdg_edge_length + RandomFloat(-30.f,30.f);\n//         if(!EdgeAlreadyExists(campaign, edge)) campaign->edges += edge;\n//     }\n\n//     // Linear branches\n\n//     int j = 0;\n//     int cur_branch = 0;\n//     int max_branch = 3;\n//     for(int i=0; i<main_path_node_count; ++i)\n//     {\n//         ++j;\n//         if(Chance(150.0f/m))\n//         {\n//             Node node = {\n//                 .pos = {410.f + 1.f*j, 460.f+1.f*j},\n//                 .vel = {0.f,0.f}//{(float)RandomU32(0,2)-1, (float)RandomU32(0,2)-1}\n//             };\n//             campaign->nodes += node;\n\n//             //int attach_index = RandomU32(1, main_path_node_count-2);\n//             Edge edge = {};\n//             edge.indices[0] = campaign->nodes.count-1;\n//             edge.indices[1] = i;//attach_index;\n//             edge.rest_length = c::fdg_edge_length + RandomFloat(-30.f,30.f);\n//             if(!EdgeAlreadyExists(campaign, edge)) campaign->edges += edge;\n\n//             if(++cur_branch >= max_branch) break;\n//             --i;\n//         }\n//     }\n\n//     int start_count = campaign->nodes.count;\n//     for(int i=0; i<m*5; ++i)\n//     {\n//         ++j;\n//         //if(Chance(50.0f))\n//         {\n//             Node node = {\n//                 .pos = {410.f + 1.f*j, 460.f+1.f*j},\n//                 .vel = {0.f,0.f}//{(float)RandomU32(0,2)-1, (float)RandomU32(0,2)-1}\n//             };\n//             campaign->nodes += node;\n\n//             Edge edge = {};\n//             edge.indices[0] = campaign->nodes.count-1;\n//             edge.indices[1] = RandomU32(0, campaign->nodes.count-2);;//attach_index;\n//             if(!EdgeAlreadyExists(campaign, edge)) campaign->edges += edge;\n\n//             edge.indices[0] = campaign->nodes.count-1;\n//             edge.indices[1] = RandomU32(0, campaign->nodes.count-2);;//attach_index;\n//             if(!EdgeAlreadyExists(campaign, edge)) campaign->edges += edge;\n//         }\n//     }\n// }\n\nvoid\nInitCampaign(Campaign *campaign)\n{\n    // campaign->map_generation_temp_arena = AllocArena();\n    // campaign->map_generation_arena = AllocArena();\n\n    campaign->arena = AllocArena();\n    campaign->selected_map_index = -1;\n\n    campaign->map_zoom_timer = {\n        .start = 0.f,\n        .cur = 0.f,\n        .length_s = 5.f,\n        .finished = false,\n    };\n\n\n    campaign->generation_params_template = {\n        .thread_finished = nullptr,\n        .restart_count   = nullptr,\n        .max_speed       = nullptr,\n        .graph           = nullptr,\n        .main_path_min = 12,\n        .main_path_max = 16,\n        .max_linear_branch_length = 3,\n        .linear_branch_extension_chance = 50.0f,\n        .loop_generation_count = 10,\n    };\n\n    int max_nodes = MaxNodesFromGenerationParams(campaign->generation_params_template);\n    int max_edges = MaxEdgesFromGenerationParams(campaign->generation_params_template);\n    for(int i=0; i<ArrayCount(campaign->maps); ++i)\n    {\n        campaign->maps[i].nodes = CreateArrayFromArena<Node>(max_nodes, &campaign->arena);\n        campaign->maps[i].edges = CreateArrayFromArena<Edge>(max_edges, &campaign->arena);\n    }\n\n    platform->CreateWorkQueue(&campaign->map_generation_work_queue, 3, \"Map generation\");\n\n    for(int i=0; i<ArrayCount(campaign->maps); ++i)\n    {\n        campaign->max_speeds[i] = 100.f;\n\n        GenerateNodeGraph_Params params = campaign->generation_params_template;\n        params.thread_finished = &campaign->generation_finished[i];\n        params.restart_count   = &campaign->restart_counts[i];\n        params.max_speed       = &campaign->max_speeds[i];\n        params.graph           = &campaign->maps[i];\n\n        WorkEntry entry = {\n            .callback = THREAD_GenerateNodeGraph,\n            .data = &params,\n            .data_byte_count = sizeof(params)\n        };\n\n        platform->AddWorkEntry(campaign->map_generation_work_queue, entry);\n    }\n\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // Log(\"Thread %d started.\", platform->StartJob(&params));\n    // GenerateNodeGraph(&campaign->map, params);\n    // campaign->nodes = CreatePermanentArray<Node>(10);\n    // campaign->edges = CreatePermanentArray<Edge>(10);\n\n    // Node root_node = {\n    //     .pos = 0.5f * game->window_size\n    // };\n    // campaign->root = AddNode(campaign, root_node);\n\n    // campaign->generation_timer = {\n    //     .start = 0.f,\n    //     .cur = 0.f,\n    //     .length_s = 0.8f,\n    //     .finished = false\n    // };\n    // campaign->generation_finished = false;\n    // campaign->drag_start_index = -1;\n    // campaign->fdg_running = true;\n}\n\nGameState\nTickCampaign(Campaign *campaign)\n{\n    // Check map generation status.\n    bool map_generation_finished = false;\n    if(platform->WorkQueuePendingJobCount(campaign->map_generation_work_queue) == 0)\n    {\n        map_generation_finished = true;\n    }\n\n    // Redo map generation when Enter is pressed.\n    if(Pressed(vk::enter) and map_generation_finished)\n    {\n        for(int i=0; i<ArrayCount(campaign->maps); ++i)\n        {\n            campaign->generation_finished[i] = false;\n            campaign->restart_counts[i] = 0;\n            campaign->max_speeds[i] = 100.f;\n\n            GenerateNodeGraph_Params params = campaign->generation_params_template;\n            params.thread_finished = &campaign->generation_finished[i];\n            params.restart_count   = &campaign->restart_counts[i];\n            params.max_speed       = &campaign->max_speeds[i];\n            params.graph           = &campaign->maps[i];\n\n            WorkEntry entry = {\n                .callback = THREAD_GenerateNodeGraph,\n                .data = &params,\n                .data_byte_count = sizeof(params)\n            };\n\n            platform->AddWorkEntry(campaign->map_generation_work_queue, entry);\n        }\n    }\n\n    if(campaign->selected_map_index < 0)\n    {\n        // Draw maps and \"Use this map\" button.\n        for(int i=0; i<ArrayCount(campaign->maps); ++i)\n        {\n            Rect map_rect = AlignRect({{(1.f/6.f)*(1+2*i)*game->window_size.x, 0.5f*game->window_size.y},\n                                       {400.f,400.f}}, c::align_center);\n            //if(campaign->generation_finished[i])\n            if(campaign->max_speeds[i] < 0.1f)\n            {\n                //DrawNodeGraphInRect(&campaign->map, {{50.f,50.f},{600.f,200.f}});\n                DrawNodeGraphInRect(&campaign->maps[i], map_rect, {10.f,10.f});\n            }\n            else\n            {\n                TextLayout layout = c::def_text_layout;\n                layout.align = c::align_center;\n                DrawText(layout, RectCenter(map_rect), \"Generating Map... \");\n            }\n\n            //DrawText(c::def_text_layout, RectTopLeft(map_rect), \"max speed: %f\", campaign->max_speeds[i]);\n            DrawUnfilledRect(map_rect, c::white);\n\n            if(map_generation_finished)\n            {\n                Rect button_rect = {};\n                Vec2f padding = {0.f, 10.f};\n                button_rect.pos = RectBottomCenter(map_rect) + padding;\n                button_rect.size = {200.f, 80.f};\n                ButtonLayout button_layout = c::def_button_layout;\n                button_layout.align = c::align_topcenter;\n                auto response = DrawButton(button_layout, button_rect, \"Use this map\");\n\n                if(response.pressed)\n                {\n                    campaign->selected_map_index = i;\n                    Reset(&campaign->map_zoom_timer);\n                }\n            }\n        }\n    }\n    else\n    {\n        if()\n    }\n\n\n    //DrawTextMultiline(c::small_text_layout, MousePos(), MetaString(campaign));\n\n    // float cam_move_speed = 20.f;\n    // if(Down(vk::right))\n    // {\n    //     campaign->camera_offset.x -= cam_move_speed;\n    //     //SetCameraPos(game->camera_pos);\n    // }\n    // if(Down(vk::left))\n    // {\n    //     campaign->camera_offset.x += cam_move_speed;\n    //     //SetCameraPos(game->camera_pos);\n    // }\n    // if(Down(vk::up))\n    // {\n    //     campaign->camera_offset.y += cam_move_speed;\n    //     //SetCameraPos(game->camera_pos);\n    // }\n    // if(Down(vk::down))\n    // {\n    //     campaign->camera_offset.y -= cam_move_speed;\n    //     //SetCameraPos(game->camera_pos);\n    // }\n\n    // if(Pressed(vk::m)) game->camera_pos = 0.5f*game->window_size;\n\n    // if(Pressed(vk::enter))\n    // //if(Tick(&campaign->generation_timer))\n    // {\n    //     campaign->max_speed = 0.f;\n    //     GenerateTreeFromMainBranch(campaign);\n    //     //SetCameraPos({0.f,0.f});\n    //     campaign->generation_finished = false;\n    //     Reset(&campaign->generation_timer);\n    // }\n\n    // if(Pressed(vk::space))\n    // {\n    //     campaign->fdg_running = !campaign->fdg_running;\n    // }\n\n    // if(Pressed(vk::RMB))\n    // {\n    //     // AddNode(Campaign *campaign, Node node, Array<int> edge_indices)\n    //     Node node = {\n    //         .pos = MousePos()\n    //     };\n    //     AddNode(campaign, node);\n    // }\n\n\n\n\n\n\n    // Color line_color = c::white;\n    // if(campaign->generation_finished) line_color = c::white;\n\n    // for(int i=0; i<campaign->edges.count; ++i)\n    // {\n    //     int a0_index = campaign->edges[i].indices[0];\n    //     int a1_index = campaign->edges[i].indices[1];\n    //     Vec2f a0 = campaign->nodes[a0_index].pos;\n    //     Vec2f a1 = campaign->nodes[a1_index].pos;\n\n    //     for(int j=i+1; j<campaign->edges.count; ++j)\n    //     {\n    //         int b0_index = campaign->edges[j].indices[0];\n    //         int b1_index = campaign->edges[j].indices[1];\n    //         Vec2f b0 = campaign->nodes[b0_index].pos;\n    //         Vec2f b1 = campaign->nodes[b1_index].pos;\n\n    //         if(LineSegmentsInnerIntersect(a0, a1, b0, b1, 0.01f))\n    //         {\n    //             //line_color = c::red;\n    //             int temp = campaign->edges[i].indices[0];\n    //             campaign->edges[i].indices[0] = campaign->edges[j].indices[0];\n    //             campaign->edges[j].indices[0] = temp;\n\n    //             if(!GraphIsFullyConnected(campaign)) GenerateTreeFromMainBranch(campaign);\n\n    //             break;\n    //         }\n    //     }\n\n    //     DrawLine(a0, a1, line_color);\n    // }\n\n    // DrawText(c::def_text_layout, {0.f,0.f}, \"generations: %d\", campaign->generation_count);\n\n\n    // for(int i=0; i<campaign->nodes.count; ++i)\n    // {\n    //     Node &node = campaign->nodes[i]; // alias\n\n    //     Rect aligned_rect = AlignRect({node.pos, c::node_size}, c::align_center);\n\n    //     DrawFilledRect(aligned_rect, c::black);\n\n    //     Color outline_color = c::red;\n\n    //     if(PointInRect(aligned_rect, MousePos() - campaign->camera_offset))\n    //     {\n    //         outline_color = c::white;\n    //     }\n    //     else if(i == 0)                      outline_color = c::green;\n    //     else if(i == campaign->end_index)    outline_color = c::yellow;\n\n    //     DrawUnfilledRect(aligned_rect, outline_color);\n    // }\n\n    // //DrawText(c::def_text_layout, {0.f,0.f}, \"%d\", campaign->edges.count);\n\n    // if(Released(vk::LMB))\n    // {\n    //     campaign->drag_start_index = -1;\n    // }\n\n    GameState new_state = GameState::None;\n    if(Pressed(KeyBind::Exit)) new_state = GameState::MainMenu;\n\n    return new_state;\n}",
			"file": "src/campaign.cpp",
			"file_size": 17101,
			"file_write_time": 132469256388699749,
			"settings":
			{
				"buffer_size": 16601,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/campaign.h",
			"settings":
			{
				"buffer_size": 939,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "_/todo.txt",
			"settings":
			{
				"buffer_size": 3433,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/timer.cpp",
			"settings":
			{
				"buffer_size": 352,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/timer.h",
			"settings":
			{
				"buffer_size": 169,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/vec.cpp",
			"settings":
			{
				"buffer_size": 5286,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inc",
				"Increment Selection"
			],
			[
				"incre",
				"Increment Selection"
			],
			[
				"INCRE",
				"Increment Selection"
			],
			[
				"lower ",
				"Convert Case: Lower Case"
			],
			[
				"Incre",
				"Increment Selection"
			],
			[
				"increm",
				"Increment Selection"
			],
			[
				"increment",
				"Increment Selection"
			],
			[
				"build",
				"Build With: buildbat"
			],
			[
				"open",
				"PackageResourceViewer: Open Resource"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"space",
				"Indentation: Convert to Spaces"
			],
			[
				"ortho",
				"Project: Refresh Folders"
			],
			[
				"util",
				"Permute Lines: Reverse"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"selec",
				"SelectiveUppercase: Uppercase selection words"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"Inc",
				"Indentation: Convert to Spaces"
			],
			[
				"increme",
				"Increment Selection"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"project",
				"Project: Add Folder"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"syntax",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"buildv",
				"Disable/Enable buildview for this window"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"toggle menu",
				"View: Toggle Menu"
			],
			[
				"menu",
				"View: Toggle Menu"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 238.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/color-c"
	],
	"file_history":
	[
		"/C/color-c/src/node_graph.h",
		"/C/color-c/src/draw.cpp",
		"/C/color-c/src/log.cpp",
		"/C/color-c/src/win32_platform.cpp",
		"/C/color-c/src/platform.h",
		"/C/color-c/src/win32_work_queue.cpp",
		"/C/color-c/src/node_graph.cpp",
		"/C/color-c/logs/critical.log",
		"/C/color-c/src/util.cpp",
		"/C/color-c/src/win32_work_queue.h",
		"/C/color-c/src/campaign.h",
		"/C/color-c/src/vec.cpp",
		"/C/color-c/src/const.h",
		"/C/color-c/src/align.cpp",
		"/C/color-c/.gitignore",
		"/C/color-c/src/array.cpp",
		"/C/color-c/src/array.h",
		"/C/color-c/src/ring_buffer.h",
		"/C/color-c/src/win32_platform.h",
		"/C/color-c/src/generate_node_graph_params.h",
		"/C/color-c/logs/log.txt",
		"/C/color-c/src/campaign.cpp",
		"/C/color-c/src/platform_include.cpp",
		"/C/color-c/src/editor.h",
		"/C/color-c/src/game.cpp",
		"/C/color-c/src/work_entry.h",
		"/C/color-c/src/memory.cpp",
		"/C/color-c/src/memory.h",
		"/C/color-c/src/text_parsing.cpp",
		"/C/color-c/src/log.h",
		"/C/color-c/src/better_text_parsing.cpp",
		"/C/color-c/src/effect.h",
		"/C/color-c/src/game_code_include.cpp",
		"/C/color-c/src/text_render.cpp",
		"/C/color-c/src/text_parsing.h",
		"/C/color-c/src/buffer.h",
		"/C/color-c/src/buffer.cpp",
		"/C/color-c/src/target_class.h",
		"/C/color-c/data/ability.dat",
		"/C/color-c/src/ability.cpp",
		"/C/color-c/src/text_render.h",
		"/C/color-c/src/font_loading.h",
		"/C/color-c/src/font_loading.cpp",
		"/C/color-c/src/freetype_wrapper.cpp",
		"/C/color-c/src/table.cpp",
		"/C/color-c/src/table.h",
		"/C/color-c/build/b.bat",
		"/C/color-c/src/meta.cpp",
		"/C/color-c/src/string.cpp",
		"/C/color-c/src/bitmap.cpp",
		"/C/color-c/src/bitmap.h",
		"/C/color-c/src/input.cpp",
		"/C/color-c/src/input.h",
		"/C/color-c/src/util.h",
		"/C/Users/Harm/AppData/Roaming/Sublime Text 3/Packages/User/buildbat.sublime-build",
		"/C/color-c/src/math.h",
		"/C/color-c/src/math.cpp",
		"/C/color-c/logs/log2.txt",
		"/C/color-c/logs/DebugTimings.txt",
		"/D/work/programming/color-c/src/log.cpp",
		"/D/work/programming/color-c/logs/log.txt",
		"/D/work/programming/color-c/TEST.txt",
		"/D/work/programming/color-c/src/log.h",
		"/D/work/programming/color-c/src/platform.h",
		"/D/work/programming/color-c/logs/log2.txt",
		"/D/work/programming/color-c/src/ring_buffer.cpp",
		"/D/work/programming/color-c/src/ring_buffer.h",
		"/D/work/programming/color-c/src/macros.h",
		"/D/work/programming/color-c/src/campaign.cpp",
		"/D/work/programming/color-c/src/game.h",
		"/D/work/programming/color-c/src/work_entry.h",
		"/D/work/programming/color-c/src/memory.h",
		"/D/work/programming/color-c/build/win32_platform.i",
		"/D/work/programming/color-c/build/b.bat",
		"/D/work/programming/color-c/src/array.cpp",
		"/D/work/programming/color-c/src/node_graph.cpp",
		"/D/work/programming/color-c/src/game.cpp",
		"/D/work/programming/color-c/src/meta.cpp",
		"/D/work/programming/color-c/src/random.h",
		"/D/work/programming/color-c/src/random.cpp",
		"/D/work/programming/color-c/src/win32_platform.cpp",
		"/D/work/programming/color-c/src/memory.cpp",
		"/D/work/programming/color-c/src/generate_node_graph_params.h",
		"/D/work/programming/color-c/src/campaign.h",
		"/D/work/programming/color-c/src/node_graph.h",
		"/D/work/programming/color-c/src/array.h",
		"/D/work/programming/color-c/src/scratch.cpp",
		"/D/work/programming/color-c/src/game_code_include.cpp",
		"/D/work/programming/color-c/src/freetype_wrapper.cpp",
		"/D/work/programming/color-c/src/freetype_wrapper.h",
		"/D/work/programming/color-c/build/game.i",
		"/D/work/programming/color-c/src/const.h",
		"/D/work/programming/color-c/src/geometry.h",
		"/D/work/programming/color-c/src/main_menu.cpp",
		"/D/work/programming/color-c/src/geometry.cpp",
		"/D/work/programming/color-c/src/test_mode.cpp",
		"/D/work/programming/color-c/src/test_mode.h",
		"/D/work/programming/color-c/src/game_state.h",
		"/D/work/programming/color-c/src/timer.h",
		"/D/work/programming/color-c/src/vec.cpp",
		"/D/work/programming/color-c/src/vec.h",
		"/D/work/programming/color-c/src/color_fragment.glsl",
		"/D/work/programming/color-c/src/color_vertex.glsl",
		"/D/work/programming/color-c/src/draw.cpp",
		"/D/work/programming/color-c/src/uv_vertex.glsl",
		"/D/work/programming/color-c/src/uv_fragment.glsl",
		"/D/work/programming/color-c/src/util.cpp",
		"/D/work/programming/color-c/src/input.cpp",
		"/D/work/programming/color-c/src/keybinds.cpp",
		"/D/work/programming/color-c/src/keybinds.h",
		"/D/work/programming/color-c/src/meta_print.h",
		"/D/work/programming/color-c/src/input.h",
		"/D/work/programming/color-c/src/meta_text_parsing.cpp",
		"/D/work/programming/color-c/data/default_keybinds.dat",
		"/D/work/programming/color-c/src/options_menu.cpp",
		"/D/work/programming/color-c/src/options_menu.h",
		"/D/work/programming/color-c/src/text_render.cpp",
		"/D/work/programming/color-c/src/imgui.cpp",
		"/D/work/programming/color-c/src/debug.cpp",
		"/D/work/programming/color-c/src/battle.cpp",
		"/D/work/programming/color-c/_/todo.txt",
		"/D/work/programming/color-c/src/text_render.h",
		"/D/work/programming/color-c/build/freetype-2.9.1/docs/FTL.TXT",
		"/D/work/programming/color-c/src/text_parsing.cpp",
		"/D/work/programming/color-c/src/better_text_parsing.cpp",
		"/D/work/programming/color-c/src/meta_text_parsing.h",
		"/D/work/programming/color-c/src/string.cpp",
		"/D/work/programming/color-c/src/meta_print.cpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 164.0,
		"where_history":
		[
			"C:\\color-c\\src, -*.i",
			"D:\\work\\programming\\color-c\\src, -*.i",
			"D:\\work\\programming\\color-c\\src",
			"D:\\work\\programming\\color-c\\src\\[^\\]*.cpp",
			"D:\\work\\programming\\color-c\\src\\*.cpp, D:\\work\\programming\\color-c\\src\\*.h",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype\\*",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\freetype\\*",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\freetype",
			"D:\\work\\programming\\color-c\\src, -\\freetype\\",
			"D:\\work\\programming\\color-c\\src, -*\\freetype\\",
			"D:\\work\\programming\\color-c\\src, -freetype\\*",
			"D:\\work\\programming\\color-c\\src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"DrawButton",
			"(*queue)",
			"restart_count",
			"invalid_state",
			"sim_state",
			"GenerateNodeGraph_Params",
			"AllocateMemory",
			"StartJob",
			"DrawText",
			"NextToken",
			"Log(",
			"GetAbilityFromId",
			"FreeBuffer",
			"TempFormatString",
			"\"\n",
			"TempFormatString",
			"Round",
			"color-c",
			"\\",
			"WriteLineTo",
			"test_int",
			"RingBuffer",
			"1024",
			");\n",
			"ClearArena",
			"WorkQueue",
			"WriteLineToFile",
			"log(",
			"Introspect",
			"CreateWorkQu",
			"const",
			"DrawText",
			"u32",
			"seed",
			"seed: ",
			"AllocArena",
			"GraphIsFullyConnected",
			"campaign->map.",
			"game",
			"indices[1]",
			"indices[0]",
			"campaign",
			"indices[1]",
			"indices[0]",
			"CreateTempArray",
			"Node",
			"campaign",
			"param",
			"#include \"node_graph.h\"",
			".indices[1]",
			".indices[0]",
			"campaign",
			"SetCa",
			"SetCamer",
			"Camera",
			"SetCamera",
			"camera_offset",
			"DrawText",
			"red",
			"Connected",
			", edge_percent",
			"max_count",
			"ResizeArray",
			"75",
			"edge",
			"DrawText",
			"void",
			"5.f",
			"RandomU32",
			"ResizeArray",
			";\n",
			"95f",
			"Resize",
			"Permanent",
			"calloc",
			"malloc",
			"printf(&header",
			"printf",
			"12",
			"09",
			"Menu",
			"AnyKey",
			"platofrm",
			"small_text",
			"small_text3",
			"Ef ",
			"\".\"",
			"fprintf(",
			"out_file",
			"Ef ",
			"mode",
			"Mode",
			"Pressed",
			"u8 key",
			"Pressed",
			"StringFromToken",
			"Token",
			"StringFrom",
			"VirtualKey_userstrings",
			"win32_GetFileSize",
			"points to location",
			"LoadFile",
			"token = {",
			"token =",
			"NextToken",
			"LoadFileIntoSizedBufferAndNullTerminate",
			"platform",
			"Reserved",
			"Pressed(vk::lmb)",
			"bind",
			"esc",
			"Esc",
			"esc",
			"exit_requested",
			"esc",
			"LineSize",
			"UpdateMainMenu",
			"main_menu",
			"ElementAt",
			"GenerateAbilityTierText",
			"tier->",
			"tier",
			"effect.target_class",
			"GetIndexByName",
			"^",
			"hovered",
			"effect.target_class",
			"last_frame"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"queue",
			"/",
			"graph->",
			"b",
			"a",
			"graph",
			"b",
			"a",
			"graph",
			"params",
			".b",
			".a",
			"graph",
			", edge_percent, &t, &u",
			", edge_percent, &t, &t",
			"cam_move_speed",
			"fprintf(&",
			"in_file",
			"KeyBind keybind",
			"LineHeight",
			"tier.",
			"tc",
			"GetIndexFromName",
			"selected",
			"tc",
			"input",
			"ipnut",
			"UnitSet",
			"FromId",
			"ability_ids",
			"breed",
			"Breed",
			"",
			"Id",
			"FromId",
			"id",
			"AllocArena",
			"",
			"Table",
			"UnitSet",
			"(int)AbilityPropertyIndex",
			"].text.length",
			"editor->input_elements",
			"search_panel_layout",
			"TokenType_",
			"*p",
			"active_string->",
			"active_string",
			"#include \"utf32string.h\"",
			"char",
			"",
			"//log",
			"Utf32String",
			"Utf32FixedString",
			"arena->",
			"arena",
			"caster",
			"DamageIgnoreArmor",
			"ability->",
			"requires",
			"TokenMatchesString(token,",
			"-",
			"EffectParams_",
			">",
			"valid",
			"lcg->",
			"battle->",
			"layout.font->",
			"damage",
			"timer->max",
			"timer->min",
			"timer->speed",
			"battle->",
			"all_targets_clean",
			"target.",
			"c::max_battle",
			"char_size.y",
			"char_size.x",
			"font.face",
			"FAST_FUNCTION",
			"SLOW_FUNCTION",
			"OPTIMIZING_FUNCTION",
			"FASTSLOW_FUNCTION",
			"font->",
			"entry->",
			"Length(traitset_string)",
			", ",
			"fullscreen_",
			"align.y == AlignY",
			"trait_layout",
			"layout.face",
			"layout.font_size",
			"focus",
			"armor",
			"trait_text_size,",
			"focus",
			"armor",
			"game->selected_unit",
			"preview_font_size,",
			"unit->",
			"imgui::active_container",
			"",
			"else if(tc == TargetClass::",
			"imgui::button_padding",
			"imgui::active_container->",
			"AbilityIsSelected",
			"IsSelectedAbility(nullptr)",
			"SelectedAbility",
			"target->",
			"source->",
			"DrawText",
			"pos",
			"Sprite",
			".texture",
			"sprite",
			"input::global_input->",
			"BgraPixel",
			"header.",
			"ihdr",
			", ",
			"bitmap",
			"bitmap.",
			"imgui::active_container",
			"layout->",
			"layout",
			"label",
			"0.5f",
			"0.f"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/campaign.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16601,
						"regions":
						{
						},
						"selection":
						[
							[
								12883,
								12883
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4583.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/campaign.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 939,
						"regions":
						{
						},
						"selection":
						[
							[
								418,
								418
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "_/todo.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3433,
						"regions":
						{
						},
						"selection":
						[
							[
								1256,
								1256
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/timer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 352,
						"regions":
						{
						},
						"selection":
						[
							[
								324,
								324
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/timer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 169,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/vec.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5286,
						"regions":
						{
						},
						"selection":
						[
							[
								5284,
								5284
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3657.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.54125,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 213.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/buildbat.sublime-build",
	"project": "color-c.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"timer",
				"src\\timer.cpp"
			],
			[
				"vec",
				"src\\vec.cpp"
			],
			[
				"todo",
				"_\\todo.txt"
			],
			[
				"crit",
				"logs\\critical.log"
			],
			[
				"node",
				"src\\node_graph.cpp"
			],
			[
				"const",
				"src\\const.h"
			],
			[
				"plat",
				"src\\platform.h"
			],
			[
				"paltf",
				"src\\platform.h"
			],
			[
				"camp",
				"src\\campaign.cpp"
			],
			[
				"log",
				"src\\log.cpp"
			],
			[
				"util",
				"src\\util.cpp"
			],
			[
				"arrayh",
				"src\\array.h"
			],
			[
				"win32",
				"src\\win32_platform.cpp"
			],
			[
				"array",
				"src\\array.h"
			],
			[
				"critic",
				"logs\\critical.log"
			],
			[
				"nodegra",
				"src\\node_graph.h"
			],
			[
				"gamec",
				"src\\game.cpp"
			],
			[
				"logt",
				"logs\\log.txt"
			],
			[
				"edit",
				"src\\editor.h"
			],
			[
				"win",
				"src\\win32_platform.cpp"
			],
			[
				"workentr",
				"src\\work_entry.h"
			],
			[
				"memory",
				"src\\memory.h"
			],
			[
				"arra",
				"src\\array.cpp"
			],
			[
				"inclu",
				"src\\game_code_include.cpp"
			],
			[
				"textpars",
				"src\\text_parsing.cpp"
			],
			[
				"textre",
				"src\\text_render.cpp"
			],
			[
				"text",
				"src\\text_parsing.cpp"
			],
			[
				"effec",
				"src\\effect.h"
			],
			[
				"targetcl",
				"src\\target_class.h"
			],
			[
				"abiltyd",
				"data\\ability.dat"
			],
			[
				"abil",
				"src\\ability.cpp"
			],
			[
				"inc",
				"src\\game_code_include.cpp"
			],
			[
				"textpar",
				"src\\text_parsing.cpp"
			],
			[
				"string",
				"src\\string.cpp"
			],
			[
				"inputc",
				"src\\input.cpp"
			],
			[
				"bitm",
				"src\\bitmap.h"
			],
			[
				"table",
				"src\\table.cpp"
			],
			[
				"metac",
				"src\\meta.cpp"
			],
			[
				"bb",
				"build\\b.bat"
			],
			[
				"abilityd",
				"data\\ability.dat"
			],
			[
				"log2",
				"logs\\log2.txt"
			],
			[
				"criti",
				"logs\\critical.log"
			],
			[
				"onst",
				"src\\const.h"
			],
			[
				"ringbu",
				"src\\ring_buffer.h"
			],
			[
				"mac",
				"src\\macros.h"
			],
			[
				"work_e",
				"src\\work_entry.h"
			],
			[
				"mem",
				"src\\memory.h"
			],
			[
				"game",
				"src\\game.cpp"
			],
			[
				"meta",
				"src\\meta.cpp"
			],
			[
				"macr",
				"src\\macros.h"
			],
			[
				"gameh",
				"src\\game.h"
			],
			[
				"logc",
				"src\\log.cpp"
			],
			[
				"memr",
				"src\\memory.cpp"
			],
			[
				"platfor",
				"src\\platform.h"
			],
			[
				"include",
				"src\\game_code_include.cpp"
			],
			[
				"freetype",
				"src\\freetype_wrapper.h"
			],
			[
				"gamecin",
				"src\\game_code_include.cpp"
			],
			[
				"win32i",
				"build\\win32_platform.i"
			],
			[
				"win32pla",
				"build\\win32_platform.i"
			],
			[
				".i",
				"build\\game.i"
			],
			[
				"geom",
				"src\\geometry.cpp"
			],
			[
				"main",
				"src\\main_menu.cpp"
			],
			[
				"gamest",
				"src\\game_state.h"
			],
			[
				"gamecode",
				"src\\game_code_include.cpp"
			],
			[
				"arrayc",
				"src\\array.cpp"
			],
			[
				"rand",
				"src\\random.cpp"
			],
			[
				"random",
				"src\\random.cpp"
			],
			[
				"uv",
				"src\\uv_vertex.glsl"
			],
			[
				"draw",
				"src\\draw.cpp"
			],
			[
				"colorfra",
				"src\\color_fragment.glsl"
			],
			[
				"color_v",
				"src\\color_vertex.glsl"
			],
			[
				"uv_ver",
				"src\\uv_vertex.glsl"
			],
			[
				"uv_fr",
				"src\\uv_fragment.glsl"
			],
			[
				"drawc",
				"src\\draw.cpp"
			],
			[
				"cmap",
				"src\\campaign.h"
			],
			[
				"campa",
				"src\\campaign.cpp"
			],
			[
				"inputh",
				"src\\input.h"
			],
			[
				"inluc",
				"src\\game_code_include.cpp"
			],
			[
				"metacp",
				"src\\meta.cpp"
			],
			[
				"metapr",
				"src\\meta_print.h"
			],
			[
				"keybn",
				"src\\keybinds.h"
			],
			[
				"batt",
				"src\\battle.cpp"
			],
			[
				"debug",
				"src\\debug.cpp"
			],
			[
				"imgui",
				"src\\imgui.cpp"
			],
			[
				"render",
				"src\\text_render.cpp"
			],
			[
				"gamse",
				"src\\game_state.h"
			],
			[
				"vech",
				"src\\vec.h"
			],
			[
				"txt",
				"build\\freetype-2.9.1\\docs\\FTL.TXT"
			],
			[
				"lot",
				"logs\\log.txt"
			],
			[
				"keybin",
				"src\\keybinds.h"
			],
			[
				"gamcode",
				"src\\game_code_include.cpp"
			],
			[
				"metatext",
				"src\\meta_text_parsing.h"
			],
			[
				"metaprin",
				"src\\meta_print.cpp"
			],
			[
				"metaprint",
				"src\\meta_print.cpp"
			],
			[
				"metaprinth",
				"src\\meta_print.h"
			],
			[
				"gamesta",
				"src\\game_state.h"
			],
			[
				"keybind",
				"src\\keybinds.h"
			],
			[
				"bettertex",
				"src\\better_text_parsing.cpp"
			],
			[
				"battle",
				"src\\battle.cpp"
			],
			[
				"stringc",
				"src\\string.cpp"
			],
			[
				"betterte",
				"src\\better_text_parsing.cpp"
			],
			[
				"platf",
				"src\\platform.h"
			],
			[
				"ogt",
				"src\\oscillating_timer.cpp"
			],
			[
				"texre",
				"src\\text_render.cpp"
			],
			[
				"debugc",
				"src\\debug.cpp"
			],
			[
				"keybindsh",
				"src\\keybinds.h"
			],
			[
				"unitc",
				"src\\unit.cpp"
			],
			[
				"default",
				"data\\default_keybinds.dat"
			],
			[
				"metacpp",
				"src\\meta.cpp"
			],
			[
				"metapars",
				"src\\meta_text_parsing.h"
			],
			[
				"keybinds",
				"src\\keybinds.cpp"
			],
			[
				"targetc",
				"src\\target_class.h"
			],
			[
				"editorh",
				"src\\editor.h"
			],
			[
				"battelh",
				"src\\battle.h"
			],
			[
				"debugtim",
				"logs\\DebugTimings.txt"
			],
			[
				"TargetS",
				"src\\target_class.h"
			],
			[
				"gamecodeinc",
				"src\\game_code_include.cpp"
			],
			[
				"mainmenu",
				"src\\main_menu.h"
			],
			[
				"consth",
				"src\\const.h"
			],
			[
				"textrend",
				"src\\text_render.h"
			],
			[
				"tablec",
				"src\\table.cpp"
			],
			[
				"battelc",
				"src\\battle.cpp"
			],
			[
				"argetclas",
				"src\\target_class.h"
			],
			[
				"unitcp",
				"src\\unit.cpp"
			],
			[
				"TargetClass",
				"src\\target_class.h"
			],
			[
				"abilityda",
				"data\\ability.dat"
			],
			[
				"effecth",
				"src\\effect.h"
			],
			[
				"battleh",
				"src\\battle.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 198.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
