{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ability_icon",
				"ability_icon_button_layout"
			],
			[
				"trait_ra",
				"trait_ranges"
			],
			[
				"cur_traits",
				"cur_traits_in_range"
			],
			[
				"selectedunit",
				"selected_unit_id"
			],
			[
				"selected_unit",
				"selected_unit_id"
			],
			[
				"origi",
				"req_bar_origin"
			],
			[
				"DrawRec",
				"DrawUnfilledRect"
			],
			[
				"Gener",
				"GenerateAbilityTierText"
			],
			[
				"DrawText",
				"DrawTextMultiline"
			],
			[
				"tier_ac",
				"tier_inactive_text_layout"
			],
			[
				"first_trai",
				"first_trait_printed"
			],
			[
				"APpend",
				"AppendCString"
			],
			[
				"Editr",
				"EditorMode"
			],
			[
				"Input",
				"InputElementType"
			],
			[
				"GL_DEPTH",
				"GL_DEPTH_COMPONENT24"
			],
			[
				"stencil",
				"stencil_rbo"
			],
			[
				"mBindE",
				"mBindBaseOpenGLFunction"
			],
			[
				"tem_uni",
				"temp_unit_table"
			],
			[
				"temp_unit",
				"temp_unit_table"
			],
			[
				"temp_",
				"temp_target"
			],
			[
				"temp_nuit",
				"temp_unit_table"
			],
			[
				"Alloc",
				"AllocTable"
			],
			[
				"traitset",
				"traitset_changes"
			],
			[
				"preview_",
				"preview_intents"
			],
			[
				"trait_ch",
				"trait_changes"
			],
			[
				"Tier",
				"DetermineAbilityTier"
			],
			[
				"Battle",
				"BattleEvent"
			],
			[
				"enemy",
				"enemy_count"
			],
			[
				"glbo",
				"global_unit"
			],
			[
				"all_unit",
				"all_unit_ids"
			],
			[
				"all_",
				"all_unit_ids"
			],
			[
				"global",
				"global_unit"
			],
			[
				"all_uni",
				"all_units"
			],
			[
				"all_units",
				"all_units"
			],
			[
				"ordere",
				"ordered_battle_units"
			],
			[
				"active_units",
				"active_units"
			],
			[
				"gpu_start_",
				"gpu_start_counter"
			],
			[
				"gpu_end",
				"gpu_end_time"
			],
			[
				"nex",
				"next_entry_to_write"
			],
			[
				"queues",
				"queues_string"
			],
			[
				"thread_",
				"thread_contexts"
			],
			[
				"threadarea",
				"thread_arena_debug_name"
			],
			[
				"chosen",
				"chosen_ability"
			],
			[
				"arrow",
				"arrow_direction"
			],
			[
				"unit_slot",
				"unit_slot_size"
			],
			[
				"Reset",
				"ResetHigh"
			],
			[
				"SetSelec",
				"SetSelectedUnit"
			],
			[
				"Desl",
				"DeselectSelectedUnit"
			],
			[
				"selected",
				"selected_ability"
			],
			[
				"null_",
				"null_unit_id"
			],
			[
				"inferred",
				"inferred_target_set"
			],
			[
				"Gene",
				"GenerateEventsFromIntent"
			],
			[
				"ability",
				"ability_table"
			],
			[
				"Appe",
				"AppendArrayToArray"
			],
			[
				"Temp",
				"CreateTempArray"
			],
			[
				"active",
				"active_unitset"
			],
			[
				"hovered",
				"hovered_ability_valid_target_set"
			],
			[
				"Create",
				"CreateTempArray"
			],
			[
				"Generate",
				"GenerateEventsFromIntent"
			],
			[
				"player",
				"player_intent"
			],
			[
				"end_turn",
				"end_turn_button_hovered"
			],
			[
				"previ",
				"preview_damage_timer"
			],
			[
				"Valid",
				"ValidUnit"
			],
			[
				"preview",
				"preview_events"
			],
			[
				"events",
				"preview_events"
			],
			[
				"prev",
				"preview_events"
			],
			[
				"valid",
				"valid_ids"
			],
			[
				"Token",
				"TokenMatchesString"
			],
			[
				"max",
				"max_bytes"
			],
			[
				"Draw",
				"DrawFilledRect"
			],
			[
				"graph",
				"graph_rect"
			],
			[
				"avg",
				"frametime_avg"
			],
			[
				"high",
				"highlight_max"
			],
			[
				"frametime_max",
				"frametime_max_text"
			],
			[
				"Rect",
				"RectTopRight"
			],
			[
				"Table",
				"TableDrawMode"
			],
			[
				"TableDraw",
				"TableDrawState"
			],
			[
				"padded",
				"padded_button_height"
			],
			[
				"row",
				"cur_row_count"
			],
			[
				"SetCam",
				"SetCameraView"
			],
			[
				"align",
				"aligned_button_rect"
			],
			[
				"fram",
				"frametime_graph_state"
			],
			[
				"framet",
				"frametimes"
			],
			[
				"frametime",
				"frametime_graph_state"
			],
			[
				"Frametim",
				"FrametimeGraphState"
			],
			[
				"frma",
				"frametime_count"
			],
			[
				"siz_",
				"size_in_bytes"
			],
			[
				"frame",
				"frame_times_ms"
			],
			[
				"number",
				"number_of_frame_times"
			],
			[
				"entry_",
				"entry_cell_size"
			],
			[
				"entri",
				"entries_per_dimension"
			],
			[
				"en",
				"entries_per_dimension"
			],
			[
				"random",
				"random_unit"
			],
			[
				"Name",
				"CreateUnitByName"
			],
			[
				"Campaign",
				"CampaignState"
			],
			[
				"Crate",
				"CreateUnitByName"
			],
			[
				"Mouse",
				"MouseFocusTaken"
			],
			[
				"draggin",
				"dragging_index"
			],
			[
				"cure",
				"current_index"
			],
			[
				"window",
				"window_rects"
			],
			[
				"debug",
				"debug_overlay"
			],
			[
				"button",
				"button_layout"
			],
			[
				"OverL",
				"OverlayOption_strings"
			],
			[
				"thread",
				"thread_arena_id"
			],
			[
				"thread_are",
				"thread_arena_id"
			],
			[
				"exit",
				"exit_requested"
			],
			[
				"deleted",
				"deleted_entry"
			],
			[
				"mBind",
				"mBindPlatformFunction"
			],
			[
				"arne",
				"arena_table_mutex"
			],
			[
				"arean",
				"arena_table_mutex"
			],
			[
				"arena_table",
				"arena_table_mutex"
			],
			[
				"Relese",
				"ReleaseMutex"
			],
			[
				"threadare",
				"thread_arena_debug_name"
			],
			[
				"scratc",
				"scratch_arena"
			],
			[
				"scrac",
				"scratch_arena"
			],
			[
				"scrat",
				"scratch_arena"
			],
			[
				"per_Fra",
				"per_frame_arena_id"
			],
			[
				"arena",
				"arena_count"
			],
			[
				"prepass",
				"prepass_framebuffer"
			],
			[
				"prepas",
				"prepass_framebuffer"
			],
			[
				"text",
				"texture_id"
			],
			[
				"blur",
				"blur_shader"
			],
			[
				"d_",
				"d_color_y"
			],
			[
				"outline",
				"outline_shader"
			],
			[
				"GLTEXT",
				"GL_TEXTURE0"
			],
			[
				"Lo",
				"LogGlError"
			],
			[
				"dst",
				"dst_coords"
			],
			[
				"Bind",
				"BindTexture"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/battle.cpp",
			"settings":
			{
				"buffer_size": 60474,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/game_code_include.cpp",
			"settings":
			{
				"buffer_size": 1321,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/imgui.h",
			"settings":
			{
				"buffer_size": 1954,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/todo_session.txt",
			"settings":
			{
				"buffer_size": 183,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "data/ability.dat",
			"settings":
			{
				"buffer_size": 2711,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/editor.cpp",
			"settings":
			{
				"buffer_size": 16306,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/battle.h",
			"settings":
			{
				"buffer_size": 2224,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "_/todo.txt",
			"settings":
			{
				"buffer_size": 16367,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "logs/log.txt",
			"settings":
			{
				"buffer_size": 9450981,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/draw.cpp",
			"settings":
			{
				"buffer_size": 7433,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 149 files for \"RectTopRight\"\n\nC:\\color-c\\src\\battle.cpp:\n  342      // layout.font_size = 16;\n  343      // layout.align = c::align_rightcenter;\n  344:     // Vec2f target_text_size = DrawText(layout, RectTopRight(infobox_aligned_rect) + Vec2f{0.f, 0.5f*name_text_size.y},\n  345      //                                \"targets %s\", TargetClass_userstrings[(int)ability->target_class]);\n  346  \n  ...\n 1313                      float line_speed = 800.f;\n 1314                      Vec2f caster_pos = RectTopLeft(caster_rect);\n 1315:                     Vec2f target_pos = RectTopRight(target_rect);\n 1316                      Vec2f arrow_direction = Normalize(target_pos - caster_pos);\n 1317                      Vec2f start_vel = 0.5f*(Vec2f{0.f,-1.f} + arrow_direction);\n\nC:\\color-c\\src\\campaign.cpp:\n  551          Rect side_panel_rect = {{}, {200.f, game->window_size.y}};\n  552          DrawFilledRect(side_panel_rect, c::dk_grey);\n  553:         DrawLine(RectTopRight(side_panel_rect), RectBottomRight(side_panel_rect), c::white);\n  554          Vec2f pen = {5.f, 0.f};\n  555  \n\nC:\\color-c\\src\\frametimes_draw.cpp:\n  110      }\n  111  \n  112:     Vec2f pen = RectTopRight(graph_rect) - Vec2f{2.f,2.f};\n  113      pen.y += DrawText(c::frametime_max_text, pen, \"scale: %.2fms\", state->graph_max).rect.size.y;\n  114      {\n  ...\n  161      }\n  162  \n  163:     // DrawTextMultiline(c::frametime_max_text, RectTopRight(graph_rect) - Vec2f{2.f,2.f},\n  164      //                   \"scale: %.2fms\\nmin: %.2fms\\nmax: %.2fms\\navg: %.2fms\",\n  165      //                   state->graph_max,\n\nC:\\color-c\\src\\imgui.cpp:\n  211  // \tDrawFilledRect(layout.rect, Color{0.05f,0.05f,0.05f,1.f});\n  212  // \tDrawUnfilledRect(layout.rect, c::lt_grey);\n  213: // \t//DrawLine(RectTopRight(layout.rect), RectBottomRight(layout.rect), c::lt_grey);\n  214  \n  215  // \tTextLayout text_layout = c::def_text_layout;\n\nC:\\color-c\\src\\unit.cpp:\n  607  \n  608      Rect solid_rect = {bar_rect.pos, {solid_bar_width, c::trait_bar_size.y}};\n  609:     Rect flash_rect = {RectTopRight(solid_rect), {flash_bar_width, c::trait_bar_size.y}};\n  610  \n  611      DrawFilledRect(solid_rect, color);\n  ...\n  646      //  overheal_layout.font_size = 16;\n  647      //  overheal_layout.align = c::align_leftcenter;\n  648:     //  Vec2f overheal_text_pos = RectTopRight(bar_rect) + Vec2f{c::overheal_text_h_offset, 0.5f*c::trait_bar_size.y};\n  649  \n  650      //  if(overheal_change_sign == 0)\n  ...\n  670      // }\n  671  \n  672:      Vec2f trait_change_text_pos = RectTopRight(bar_rect) + Vec2f{c::trait_change_preview_h_offset, 0.5f*bar_rect.size.y};\n  673  \n  674      // Draw change to trait to the right of the trait bar\n\nC:\\color-c\\src\\vec.cpp:\n  318  \n  319  Vec2f\n  320: RectTopRight(Rect rect)\n  321  {\n  322      return rect.pos + Vec2f{rect.size.x, 0.f};\n\n10 matches across 6 files\n\n\nSearching 149 files for \"DrawAbilityInfoBox\"\n\nC:\\color-c\\src\\battle.cpp:\n  309  \n  310  void\n  311: DrawAbilityInfoBox(Vec2f pos, Id<Unit> caster_id, Id<Ability> ability_id, int active_tier_level, Align align)\n  312  {\n  313      SetDrawDepth(1.f);\n  ...\n  527              if(response.hovered and (Down(vk::alt) or Down(vk::LMB)))\n  528              {\n  529:                 DrawAbilityInfoBox(MousePos(), ability_id, tier, c::align_topleft);\n  530              }\n  531  \n  ...\n  917                  if(active_tier >= 0)\n  918                  {\n  919:                     DrawAbilityInfoBox(battle->hud.pos + c::hud_ability_info_offset,\n  920                                         hovered_ability_id,\n  921                                         active_tier,\n  ...\n  928                  if(active_tier >= 0)\n  929                  {\n  930:                     DrawAbilityInfoBox(battle->hud.pos + c::hud_ability_info_offset,\n  931                                         battle->selected_ability_id,\n  932                                         active_tier,\n  ...\n 1443                      {\n 1444                          SetDrawDepth(c::ability_card_draw_depth);\n 1445:                         DrawAbilityInfoBox(MousePos(), ability_id, tier, c::align_topleft);\n 1446                      }\n 1447  \n\nC:\\color-c\\src\\battle.h:\n   82  void DrawUnitHudData(Battle *battle);\n   83  void DrawTargetingInfo(Battle *battle);\n   84: void DrawAbilityInfoBox(Vec2f pos, Id<Unit> caster_id, Id<Ability> ability_id, int tier, Align align = c::align_topleft);\n   85  \n   86  void UpdateHoveredUnit(Battle *battle);\n\nC:\\color-c\\src\\unit.h:\n   65  Vec2f DrawTraitBarWithPreview(Vec2f pos, int current, int max, int preview, Color color, float flash_timer);\n   66  void DrawTraitSetWithPreview(Vec2f pos, TraitSet cur_traits, TraitSet max_traits, TraitSet preview_traits, float flash_timer);\n   67: //void DrawAbilityInfoBox(Vec2f pos, Ability ability, Align align);\n   68  \n   69  //void AddUnitToUnitSet(Id<Unit> unit_id, UnitSet *target_set);\n\n7 matches across 3 files\n\n\nSearching 151 files for \"Invalid TargetClass encountered\"\n\nC:\\color-c\\src\\unit.cpp:\n  255  //  }\n  256  \n  257: //  Log(\"Invalid TargetClass encountered (%d)\", int(tc));\n  258  //  return false;\n  259  // }\n  ...\n  343      }\n  344  \n  345:     Log(\"Invalid TargetClass encountered (%d)\", int(tc));\n  346      return false;\n  347  }\n\n2 matches in 1 file\n\n\nSearching 151 files for \"GenerateInferred\"\n\nC:\\color-c\\src\\battle.cpp:\n  585              unit->intent.caster_id = unit_id;\n  586              unit->intent.ability_id = chosen_ability_id;\n  587:             GenerateInferredUnitSet(unit_id,\n  588                                      chosen_target_id,\n  589                                      tier.target_class,\n  ...\n  988                  if(tier_index >= 0)\n  989                  {\n  990:                     GenerateInferredUnitSet(battle->selected_unit_id,\n  991                                              hovered_unit_id,\n  992                                              selected_ability->tiers[tier_index].target_class,\n\nC:\\color-c\\src\\unit.cpp:\n  348  \n  349  void\n  350: GenerateInferredUnitSet(Id<Unit> caster_id,\n  351                          Id<Unit> selected_target_id,\n  352                          TargetClass tc,\n\nC:\\color-c\\src\\unit.h:\n   81  bool CheckValidTarget(Id<Unit> caster_id, Id<Unit> target_id, TargetClass tc);\n   82  \n   83: void GenerateInferredUnitSet(Id<Unit> caster_id,\n   84  \t                         Id<Unit> selected_target_id,\n   85  \t                         TargetClass tc,\n\n4 matches across 3 files\n\n\nSearching 151 files for \"CheckValidTarget\"\n\nC:\\color-c\\src\\battle.cpp:\n   87      for(Id target_id : all_units)\n   88      {\n   89:         if(!CheckValidTarget(caster_id, target_id, tc)) continue;\n   90  \n   91          *valid_selection_units += target_id;\n\nC:\\color-c\\src\\unit.cpp:\n  296  \n  297  bool\n  298: CheckValidTarget(Id<Unit> caster_id, Id<Unit> target_id, TargetClass tc)\n  299  {\n  300      Unit *caster = GetUnitFromId(caster_id);\n  ...\n  361  \n  362      // Return empty target set if the selected target is invalid or not a valid target for the given target_class\n  363:     if(!CheckValidTarget(caster_id, selected_target_id, tc)) return;\n  364  \n  365      ClearArray(inferred_target_set);\n\nC:\\color-c\\src\\unit.h:\n   79  \n   80  bool UnitIsDead(UnitId unit_id);\n   81: bool CheckValidTarget(Id<Unit> caster_id, Id<Unit> target_id, TargetClass tc);\n   82  \n   83  void GenerateInferredUnitSet(Id<Unit> caster_id,\n\n4 matches across 3 files\n\n\nSearching 151 files for \"CheckValidTarget\"\n\nC:\\color-c\\src\\battle.cpp:\n   87      for(Id target_id : all_units)\n   88      {\n   89:         if(!CheckValidTarget(caster_id, target_id, tc)) continue;\n   90  \n   91          *valid_selection_units += target_id;\n\nC:\\color-c\\src\\unit.cpp:\n  296  \n  297  bool\n  298: CheckValidTarget(Id<Unit> caster_id, Id<Unit> target_id, TargetClass tc)\n  299  {\n  300      Unit *caster = GetUnitFromId(caster_id);\n  ...\n  361  \n  362      // Return empty target set if the selected target is invalid or not a valid target for the given target_class\n  363:     if(!CheckValidTarget(caster_id, selected_target_id, tc)) return;\n  364  \n  365      ClearArray(inferred_target_set);\n\nC:\\color-c\\src\\unit.h:\n   79  \n   80  bool UnitIsDead(UnitId unit_id);\n   81: bool CheckValidTarget(Id<Unit> caster_id, Id<Unit> target_id, TargetClass tc);\n   82  \n   83  void GenerateInferredUnitSet(Id<Unit> caster_id,\n\n4 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 8407,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "#include \"unit.h\"\n\n#include \"util.h\"\n#include \"text_parsing.h\"\n\n// Unit *UnitAtIndex(UnitSet set, int index)\n// {\n//  if(index < 0 or index >= set.size) return nullptr;\n\n//  return set.units[index];\n// }\n\nbool\nUnitIsDead(UnitId unit_id)\n{\n    Unit *unit = GetUnitFromId(unit_id);\n    if(!ValidUnit(unit) or unit->cur_traits.vigor <= 0) return true;\n    else return false;\n}\n\nbool\nParseNextAsBreedData(Buffer *buffer, Breed *breed, Table<Ability> ability_table)\n{\n    if(!buffer or !breed) return false;\n\n    bool valid_unit_data = true;\n    char *initial = buffer->p;\n    Breed temp_breed = {};\n    for(int i=0; i<c::moveset_max_size; i++)\n    {\n        temp_breed.ability_ids[i] = c::null_ability_id;\n    }\n\n    bool header_valid = ConfirmNextTokenAsIdentifier(buffer, \"unit\");\n    if(!header_valid)\n    {\n        // The current location in the buffer doesn't point to the beginning of a unit's data.\n        valid_unit_data = false;\n    }\n\n    Token name_token;\n    bool is_valid_name = NextTokenAsDoubleQuotedString(buffer, &name_token);\n    if(!is_valid_name)\n    {\n        // There is no name given or the string is misformatted for the unit's name.\n        valid_unit_data = false;\n    }\n\n    bool end_of_unit_data = false;\n    while(valid_unit_data and !end_of_unit_data)\n    {\n        char *before_token = buffer->p;\n        Token token = NextToken(buffer);\n\n        if(BufferBytesRemaining(*buffer) == 0 or TokenMatchesString(token, \"unit\"))\n        {\n            // reset buffer to before the previous token was fetched, since it's not part of the current\n            // ability data\n            buffer->p = before_token;\n            end_of_unit_data = true;\n        }\n        else if(TokenMatchesString(token, \"traits\"))\n        {\n            valid_unit_data = ParseNextAsTraitSet(buffer, &temp_breed.max_traits);\n        }\n        else if(TokenMatchesString(token, \"moveset\"))\n        {\n            // Look for *up to* moveset_max_size strings of ability names\n            for(int i=0; i<c::moveset_max_size; i++)\n            {\n                Token ability_name_token;\n                if(NextTokenAsDoubleQuotedString(buffer, &ability_name_token))\n                {\n                    temp_breed.ability_ids[i] = GetIndexFromName(ability_table, StringFromToken(ability_name_token));\n\n                    if(temp_breed.ability_ids[i] == c::null_ability_id)\n                    {\n                        // Found an ability name string for moveset, but it's not an ability\n                        // that exists in the ability table.\n                        valid_unit_data = false;\n                    }\n                }\n                else\n                {\n                    break;\n                }\n            }\n        }\n        else if(TokenMatchesString(token, \"tier\"))\n        {\n            valid_unit_data = ParseNextAsS32(buffer, &temp_breed.tier);\n        }\n        else\n        {\n            // Encountered invalid identifier token in unit data.\n            valid_unit_data = false;\n        }\n    }\n\n    if(valid_unit_data)\n    {\n        *breed = temp_breed;\n        breed->name = StringFromToken(name_token, memory::permanent_arena_id);\n        // CopyString()\n        // CopyString(breed->name, name_token.start, m::Min(sizeof(breed->name), name_token.length+1));\n\n        return true;\n    }\n    else\n    {\n        buffer->p = initial;\n        size_t number_of_bytes_to_print = m::Min(BufferBytesRemaining(*buffer), size_t(32));\n        Log(\"Encountered invalid unit data in buffer at address: %p (\\\"%.*s\\\")\",\n            buffer->p, number_of_bytes_to_print, buffer->p);\n\n        return false;\n    }\n}\n\nbool\nLoadBreedFile(const char *filename, Table<Breed> *breed_table, Table<Ability> ability_table)\n{\n    if(!filename or !breed_table) return false;\n\n    Buffer file;\n    bool load_success = platform->LoadFileIntoSizedBufferAndNullTerminate(filename, &file);\n    if(!load_success) return false;\n\n    size_t unit_count_loaded = 0;\n\n    while(BufferBytesRemaining(file) > 0)\n    {\n        bool found_unit = SeekNextLineThatBeginsWith(&file, \"unit\");\n        if(!found_unit) break;\n\n        Breed temp_breed = {};\n        if(ParseNextAsBreedData(&file, &temp_breed, ability_table))\n        {\n            auto breed_id = CreateEntry(breed_table);\n            Breed *breed = GetBreedFromId(breed_id);\n            if(breed == nullptr) break;\n\n            *breed = temp_breed;\n            breed->init = true;\n            ++unit_count_loaded;\n        }\n        else\n        {\n            ++file.p;\n            continue;\n        }\n    }\n\n    if(c::verbose_success_logging)\n    {\n        Log(\"Loaded %zu unit breeds from file: %s\", unit_count_loaded, filename);\n    }\n    FreeBuffer(&file);\n    return true;\n}\n\n// On success, returns pointer to newly created unit, which is placed in g::unit_table.\n// Returns nullptr if unit creation fails for any reason.\nId<Unit>\nCreateUnit(Id<Breed> breed_id, Team team, PoolId<Arena> arena_id)\n{\n    Breed *breed = GetBreedFromId(breed_id);\n    if(!ValidBreed(breed)) return c::null_unit_id;\n\n    auto unit_id = CreateEntry(&g::unit_table);\n    Unit *unit = GetUnitFromId(unit_id);\n    if(!unit) return c::null_unit_id;\n\n    unit->name = CopyString(breed->name, arena_id);\n    unit->team = team;\n    unit->max_traits = breed->max_traits;\n    unit->cur_traits = breed->max_traits;\n    for(int i=0; i<c::moveset_max_size; i++)\n    {\n        // @note: do we need to actually check that this ability is valid?\n        //        i.e., can a unit have a reference to an invalid ability? Maybe.\n        // Ability *ability = GetAbilityFromId(breed->ability_ids[i]);\n        // if(ability == nullptr) continue;\n\n        unit->ability_ids[i] = breed->ability_ids[i];\n    }\n    unit->cur_action_points = 0;\n    unit->max_action_points = 1;\n\n    unit->intent.target_set = CreateArrayFromArena<UnitId>(8, arena_id);\n\n    unit->init = true;\n    return unit_id;\n}\n\nId<Unit>\nCreateUnitByName(String name, Team team, PoolId<Arena> arena_id)\n{\n    Id breed_id = GetIndexFromName(g::breed_table, name);\n    return CreateUnit(breed_id, team, arena_id);\n}\n\nId<Unit>\nCreateUnitByName(char *name, Team team, PoolId<Arena> arena_id)\n{\n    String name_string = StringFromCString(name);\n    return CreateUnitByName(name_string, team, arena_id);\n}\n\n// bool\n// _CheckValidEffectTarget(Unit *caster, Unit *target, Effect *effect)\n// {\n//  if(!ValidUnit(caster) or !ValidUnit(target)) return false;\n\n//  TargetClass tc = effect->target_class;\n//  if(tc == TargetClass::self)\n//  {\n//      return(caster == target);\n//  }\n//  else if(tc == TargetClass::single_ally)\n//  {\n//      return(caster->team == target->team);\n//  }\n//  else if(tc == TargetClass::single_ally_not_self)\n//  {\n//      return(caster->team == target->team and caster != target);\n//  }\n//  else if(tc == TargetClass::all_allies)\n//  {\n//      return(caster->team == target->team);\n//  }\n//  else if(tc == TargetClass::all_allies_not_self)\n//  {\n//      return(caster->team == target->team and caster != target);\n//  }\n//  else if(tc == TargetClass::single_enemy)\n//  {\n//      return(caster->team != target->team);\n//  }\n//  else if(tc == TargetClass::all_enemies)\n//  {\n//      return(caster->team != target->team);\n//  }\n//  else if(tc == TargetClass::single_unit)\n//  {\n//      return true;\n//  }\n//  else if(tc == TargetClass::single_unit_not_self)\n//  {\n//      return(caster != target);\n//  }\n//  else if(tc == TargetClass::all_units)\n//  {\n//      return true;\n//  }\n\n//  Log(\"Invalid TargetClass encountered (%d)\", int(tc));\n//  return false;\n// }\n\n// void AddUnitToUnitSet(Id<Unit> unit_id, Array<UnitId> *unit_set)\n// {\n//  if(unit_set->count >= ArrayCount(unit_set->ids)) return; // Set is already full.\n\n//  bool unit_already_in_set = false;\n//  for(auto unit_in_set_id : *unit_set)\n//  {\n//      if(unit_id == unit_in_set_id) unit_already_in_set = true;\n//  }\n\n//  if(!unit_already_in_set)\n//  {\n//      unit_set->ids[unit_set->size++] = unit_id;\n//  }\n// }\n\n// UnitSet\n// CombineUnitSets(const UnitSet *a, const UnitSet *b)\n// {\n//  UnitSet combined = {};\n//  for(int i=0; i<a->size; i++)\n//  {\n//      AddUnitToUnitSet(a->ids[i], &combined);\n//  }\n\n//  for(int i=0; i<b->size; i++)\n//  {\n//      if(!UnitInUnitSet(b->ids[i], *a))\n//      {\n//          AddUnitToUnitSet(b->ids[i], &combined);\n//      }\n//  }\n\n//  return combined;\n// }\n\nbool\nCheckValidTarget(Id<Unit> caster_id, Id<Unit> target_id, TargetClass tc)\n{\n    Unit *caster = GetUnitFromId(caster_id);\n    Unit *target = GetUnitFromId(target_id);\n    if(!ValidUnit(caster) or !ValidUnit(target) or UnitIsDead(caster_id) or UnitIsDead(target_id)) return false;\n\n    if(tc == TargetClass::self)\n    {\n        return(caster_id == target_id);\n    }\n    else if(tc == TargetClass::single_ally)\n    {\n        return(caster->team == target->team);\n    }\n    else if(tc == TargetClass::single_ally_not_self)\n    {\n        return(caster->team == target->team and caster_id != target_id);\n    }\n    else if(tc == TargetClass::all_allies)\n    {\n        return(caster->team == target->team);\n    }\n    else if(tc == TargetClass::all_allies_not_self)\n    {\n        return(caster->team == target->team and caster_id != target_id);\n    }\n    else if(tc == TargetClass::single_enemy)\n    {\n        return(caster->team != target->team);\n    }\n    else if(tc == TargetClass::all_enemies)\n    {\n        return(caster->team != target->team);\n    }\n    else if(tc == TargetClass::single_unit)\n    {\n        return true;\n    }\n    else if(tc == TargetClass::single_unit_not_self)\n    {\n        return(caster_id != target_id);\n    }\n    else if(tc == TargetClass::all_units)\n    {\n        return true;\n    }\n\n    Log(\"Invalid TargetClass encountered (%d)\", int(tc));\n    return false;\n}\n\nvoid\nGenerateInferredUnitSet(Id<Unit> caster_id,\n                        Id<Unit> selected_target_id,\n                        TargetClass tc,\n                        Array<UnitId> all_targets,\n                        Array<UnitId> *inferred_target_set)\n{\n    TIMED_BLOCK;\n\n    Unit *caster = GetUnitFromId(caster_id);\n    Unit *selected_target = GetUnitFromId(selected_target_id);\n    if(!ValidUnit(caster) or !ValidUnit(selected_target)) return;\n\n    // Return empty target set if the selected target is invalid or not a valid target for the given target_class\n    if(!CheeckValidTargt(caster_id, selected_target_id, tc)) return;\n\n    ClearArray(inferred_target_set);\n\n    if(tc == TargetClass::all_allies)\n    {\n        // All targets that are on the same team as the caster\n        for(auto target_id : all_targets)\n        {\n            Unit *target = GetUnitFromId(target_id);\n            if(!ValidUnit(target)) continue;\n\n            if(target->team == caster->team and !UnitIsDead(target_id))\n            {\n                *inferred_target_set += target_id;\n            }\n        }\n    }\n    else if(tc == TargetClass::all_allies_not_self)\n    {\n        // All targets that are on the same team as the caster, excluding the caster.\n        for(auto target_id : all_targets)\n        {\n            Unit *target = GetUnitFromId(target_id);\n            if(!ValidUnit(target)) continue;\n\n            if(target_id != caster_id and target->team == caster->team and !UnitIsDead(target_id))\n            {\n                *inferred_target_set += target_id;\n            }\n        }\n    }\n    else if(tc == TargetClass::single_ally_not_self)\n    {\n        // if(selected target is ally _AND_ selected target is not self)\n        if(selected_target->team == caster->team and selected_target != caster and !UnitIsDead(selected_target_id))\n        {\n            *inferred_target_set += selected_target_id;\n        }\n    }\n    else if(tc == TargetClass::single_unit_not_self)\n    {\n        // if(selected target is not self)\n        if(selected_target != caster and !UnitIsDead(selected_target_id))\n        {\n            *inferred_target_set += selected_target_id;\n        }\n    }\n    else if(tc == TargetClass::all_enemies)\n    {\n        // All targets that are not on the same team as the caster.\n        for(auto target_id : all_targets)\n        {\n            Unit *target = GetUnitFromId(target_id);\n            if(!ValidUnit(target)) continue;\n\n            if(target->team != caster->team and !UnitIsDead(target_id))\n            {\n                *inferred_target_set += target_id;\n            }\n        }\n    }\n    else if(tc == TargetClass::all_units)\n    {\n        // All targets\n        for(auto target_id : all_targets)\n        {\n            if(UnitIsDead(target_id)) continue;\n            Unit *target = GetUnitFromId(target_id);\n            if(!ValidUnit(target)) continue;\n\n            *inferred_target_set += target_id;\n        }\n    }\n    else\n    {\n        // Single-target abilities need no inference. The inferred target set is\n        // always equal to the selected target if it's a valid target.\n        // At the time of writing this comment, this includes:\n        //      self, single_ally, single_enemy, single_unit\n\n        Unit *selected_target = GetUnitFromId(selected_target_id);\n        if(ValidUnit(selected_target) and !UnitIsDead(selected_target_id))\n        {\n            *inferred_target_set += selected_target_id;\n        }\n    }\n}\n\nbool\nUnitInUnitSet(Id<Unit> unit_id, Array<UnitId> target_set, int *index)\n{\n    Unit *unit = GetUnitFromId(unit_id);\n    if(!ValidUnit(unit)) return false;\n\n    for(int i=0; i<target_set.count; i++)\n    {\n        if(unit_id == target_set[i])\n        {\n            if(index) *index = i;\n            return true;\n        }\n    }\n\n    if(index) *index = -1;\n    return false;\n}\n\n// // @note: AOWTC this doesn't check that the unit_id is valid.\n// //        I figured this wouldn't be a problem, since it's not\n// //        necessarilly a bug for a unit id corresponding to an\n// //        invalid unit to be inside a unit set -- it's up to the\n// //        methods interpreting the unit set to check for that.\n// void\n// AddUnitIdToUnitSet(Id<Unit> unit_id, UnitSet *target_set)\n// {\n//  // Do nothing if target set is already at max size\n//  if(target_set->size >= ArrayCount(target_set->ids)) return;\n\n//  // Do nothing if [*unit] is already part of the set\n//  if(UnitInUnitSet(unit_id, *target_set)) return;\n\n//  // Add the unit to the set\n//  target_set->ids[target_set->size++] = unit_id;\n// }\n\nVec2f\nDrawTraitBarWithPreview(Vec2f pos, int current, int max, int preview, Color color, float flash_timer)\n{\n    TIMED_BLOCK;\n\n    const Rect bar_rect = {pos, c::trait_bar_size};\n\n    // If the max value is 0, don't draw the trait bar.\n    if(max <= 0)\n    {\n        //ErrorDrawText(pos, \"max <= 0\");\n        return Vec2f{};\n    }\n    else if(current < 0)\n    {\n        ErrorDrawText(pos, \"current < 0\");\n        return Vec2f{};\n    }\n    else if(preview < 0)\n    {\n        ErrorDrawText(pos, \"preview < 0\");\n        return Vec2f{};\n    }\n\n    // Cases:\n    //\n    // NO CHANGE\n    //      1) Trait is not being changed (preview == current)\n    //          => Color bar proportionally to current/max\n    //          => If there's overheal, draw it as \"X\", where X=current-max\n    //\n    // INCREASING\n    //      2) normal range => normal range\n    //          => Color bar proportionally to current/max\n    //          => Flash N pips, where N=preview-current\n    //      3) normal range => overheal\n    //          => Color bar proportionally to current/max\n    //          => Flash N pips, where N=max-current\n    //          => Draw \"0+X\" as overheal, where X=preview-max\n    //      4) overheal => overheal\n    //          => Fill bar\n    //          => Draw \"X+Y\" as overheal, where X=current_overheal, Y=preview-current\n    //\n    // DECREASING\n    //      5) normal range => normal range\n    //          => Color bar proportionally to preview/max\n    //          => Flash N pips, where N=current-preview\n    //      6) overheal => normal range\n    //          => Color bar proportionally to preview/max\n    //          => Flash N pips, where N=max-preview\n    //          => Draw \"X-Y\", where X=current_overheal, Y=current_overheal\n    //      7) overheal => overheal\n    //          => Fill bar\n    //          => Draw \"X-Y\" as overheal, where X=current_overheal, Y=current-preview\n\n    int solid_pip_count = 0;\n    int flash_pip_count = 0;\n    int overheal_change_sign = 0; // <0 if negative, 0 if unchanged, >0 if positive\n    if(preview == current)\n    {\n        // Case 1 (No change)\n        solid_pip_count = m::Max(0, m::Min(current, max));\n        flash_pip_count = 0;\n        overheal_change_sign = 0;\n    }\n    else if(preview > current and current <= max and preview <= max)\n    {\n        // Case 2 (increase; normal => normal)\n        solid_pip_count = current;\n        flash_pip_count = preview-current;\n        overheal_change_sign = 0;\n    }\n    else if(preview > current and current <= max and preview > max)\n    {\n        // Case 3 (increase; normal => overheal)\n        solid_pip_count = current;\n        flash_pip_count = max-current;\n        overheal_change_sign = 1;\n    }\n    else if(preview > current and current > max and preview > max)\n    {\n        // Case 4 (increase; overheal => overheal)\n        solid_pip_count = max;\n        flash_pip_count = 0.f;\n        overheal_change_sign = 1;\n    }\n    else if(preview < current and current <= max and preview <= max)\n    {\n        // Case 5 (decrease; normal => normal)\n        solid_pip_count = preview;\n        flash_pip_count = current-preview;\n        overheal_change_sign = 0;\n    }\n    else if(preview < current and current > max and preview <= max)\n    {\n        // Case 6 (decrease; overheal => normal)\n        solid_pip_count = preview;\n        flash_pip_count = max-preview;\n        overheal_change_sign = -1;\n    }\n    else if(preview < current and current > max and preview > max)\n    {\n        // Case 7 (decrease; overheal => overheal)\n        solid_pip_count = max;\n        flash_pip_count = 0;\n        overheal_change_sign = -1;\n    }\n    else if(c::verbose_error_logging)\n    {\n        Log(\"Invalid case encountered in function \" __FUNCTION__ \" (current:%d, max:%d, preview:%d)\",\n            current, max, preview);\n\n        return Vec2f{};\n    }\n\n    float pip_width = c::trait_bar_size.x / max;\n    float solid_bar_width = solid_pip_count * pip_width;\n    float flash_bar_width = flash_pip_count * pip_width;\n\n    Rect solid_rect = {bar_rect.pos, {solid_bar_width, c::trait_bar_size.y}};\n    Rect flash_rect = {RectTopRight(solid_rect), {flash_bar_width, c::trait_bar_size.y}};\n\n    DrawFilledRect(solid_rect, color);\n    if(preview < current)\n    {\n        // Flash red if trait is being decreased\n        Color flashing_red = {1.f, 0.f, 0.f, flash_timer};\n        DrawFilledRect(flash_rect, flashing_red);\n    }\n    if(preview > current)\n    {\n        // Flash green if trait is being increased\n        Color flashing_green = {0.f, 1.f, 0.f, flash_timer};\n        DrawFilledRect(flash_rect, flashing_green);\n    }\n\n    DrawUnfilledRect(bar_rect, c::white);\n\n\n    // for(int i=0; i<max; i++)\n    // {\n    //  // double-width line\n    //  DrawLine(bar_rect.pos + Vec2f{i*pip_width, 0.f},\n    //           bar_rect.pos + Vec2f{i*pip_width, bar_rect.size.y},\n    //           c::white);\n    //  DrawLine(bar_rect.pos + Vec2f{i*pip_width+1, 0.f},\n    //           bar_rect.pos + Vec2f{i*pip_width+1, bar_rect.size.y},\n    //           c::white);\n    // }\n\n    //DrawText(c::trait_bar_value_text_layout, RectCenter(bar_rect), \"%d/%d\", m::Min(preview, max), max);\n    DrawText(c::trait_bar_value_text_layout, RectCenter(bar_rect), \"%d/%d\", preview, max);\n\n    // Draw overheal box and number value if there is any overheal (previewed overheal > 0)\n    // if(preview > max or current > max)\n    // {\n    //  TextLayout overheal_layout = c::def_text_layout;\n    //  overheal_layout.font_size = 16;\n    //  overheal_layout.align = c::align_leftcenter;\n    //  Vec2f overheal_text_pos = RectTopRight(bar_rect) + Vec2f{c::overheal_text_h_offset, 0.5f*c::trait_bar_size.y};\n\n    //  if(overheal_change_sign == 0)\n    //  {\n    //      DrawText(overheal_layout, overheal_text_pos, \"%d\", current-max);\n    //  }\n    //  else if(overheal_change_sign > 0)\n    //  {\n    //      overheal_text_pos.x += DrawText(overheal_layout, overheal_text_pos, \"%d\", m::Max(0, current-max)).x;\n\n    //      Color flashing_color = {0.f, 1.f, 0.f, flash_timer};\n    //      overheal_layout.color = flashing_color;\n    //      DrawText(overheal_layout, overheal_text_pos, \" +%d\", preview-max);\n    //  }\n    //  else if(overheal_change_sign < 0)\n    //  {\n    //      overheal_text_pos.x += DrawText(overheal_layout, overheal_text_pos, \"%d\", current-max).x;\n\n    //      Color flashing_color = {1.f, 0.f, 0.f, flash_timer};\n    //      overheal_layout.color = flashing_color;\n    //      DrawText(overheal_layout, overheal_text_pos, \" -%d\", current-max);\n    //  }\n    // }\n\n     Vec2f trait_change_text_pos = RectTopRight(bar_rect) + Vec2f{c::trait_change_preview_h_offset, 0.5f*bar_rect.size.y};\n\n    // Draw change to trait to the right of the trait bar\n    if(preview == current)\n    {\n        // Draw nothing if no change.\n    }\n    else if(preview > current)\n    {\n        // Draw green \"+X\" if trait is increasing\n\n        TextLayout layout = c::trait_change_preview_text_layout;\n        layout.color = {0.f, 1.f, 0.f, flash_timer};\n        DrawText(layout, trait_change_text_pos, \"+%d\", preview-current);\n    }\n    else if(preview < current)\n    {\n        // Draw red \"-X\" if trait is decreasing\n\n        TextLayout layout = c::trait_change_preview_text_layout;\n        layout.color = {1.f, 0.f, 0.f, flash_timer};\n        DrawText(layout, trait_change_text_pos, \"-%d\", current-preview);\n    }\n\n    return(Vec2f{0.f, c::trait_bar_size.y});\n}\n\n// void\n// DrawTraitSet(Vec2f pos, TraitSet cur_traits, TraitSet max_traits)\n// {\n//  pos += DrawTraitBarWithPreview(pos, cur_traits.vigor, max_traits.vigor,\n//                                 cur_traits.vigor, c::red); // Vigor\n//  pos += DrawTraitBarWithPreview(pos, cur_traits.focus, max_traits.focus,\n//                                 cur_traits.focus, c::lt_blue); // Focus\n//  pos += DrawTraitBarWithPreview(pos, cur_traits.armor, max_traits.armor,\n//                                 cur_traits.armor, c::gold); // Armor\n// }\n\nvoid\nDrawTraitSetWithPreview(Vec2f pos, TraitSet cur_traits, TraitSet max_traits, TraitSet preview_traits, float flash_timer)\n{\n    pos += DrawTraitBarWithPreview(pos, cur_traits.vigor, max_traits.vigor,\n                                   preview_traits.vigor, c::red, flash_timer); // Vigor\n    pos += DrawTraitBarWithPreview(pos, cur_traits.focus, max_traits.focus,\n                                   preview_traits.focus, c::lt_blue, flash_timer); // Focus\n    pos += DrawTraitBarWithPreview(pos, cur_traits.armor, max_traits.armor,\n                                   preview_traits.armor, c::gold, flash_timer); // Armor\n}\n\nchar *\nTraitSetString(TraitSet traits)\n{\n    char *traitset_string = ScratchString(c::max_traitset_string_size);\n\n    bool prepend_space = false; // Track whether a trait has been written yet, so we know to prepend a space.\n    char *p = traitset_string;\n\n    const int trait_count = 3;\n    char trait_chars[trait_count+1] = \"VFA\";\n    for(int i=0; i<trait_count; i++)\n    {\n        if(traits[i] == 0) continue;\n\n        char format_string[5];\n        char *f = format_string;\n        if(prepend_space) *f++ = ' ';\n        *f++ = '%';\n        *f++ = 'd';\n        *f++ = trait_chars[i];\n        *f = '\\0';\n\n        int substring_length = snprintf(p, c::max_traitset_string_size, format_string, traits[i]);\n        if(substring_length < 0 or substring_length > c::max_traitset_string_size)\n        {\n            // snprintf had an encoding error or traitset_string wasn't large enough.\n            traitset_string[0] = '\\0';\n            return traitset_string;\n        }\n        p += substring_length;\n\n        prepend_space = true;\n    }\n\n    *p = '\\0';\n    return traitset_string;\n}\n\nint\nDetermineAbilityTier(Id<Unit> caster_id, Id<Ability> ability_id)\n{\n    TIMED_BLOCK;\n\n    Unit *caster = GetUnitFromId(caster_id);\n    Ability *ability = GetAbilityFromId(ability_id);\n    if(!ValidUnit(caster) or !ValidAbility(ability)) return -1;\n\n    for(int i=ability->tiers.count-1; i>=0; --i)\n    {\n        if(caster->cur_traits >= ability->tiers[i].required_traits) return i;\n    }\n\n    // The caster doesn't have the required traits to use the ability at all.\n    // We return a negative value to indicate this case.\n    return -1;\n}\n\n// Assumes outer context has already checked that *caster and *ability are valid.\nint\nDetermineAbilityTier(Unit *caster, Ability *ability)\n{\n    for(int i=ability->tiers.count-1; i>=0; --i)\n    {\n        if(caster->cur_traits >= ability->tiers[i].required_traits) return i;\n    }\n\n    // The caster doesn't have the required traits to use the ability at all.\n    // We return a negative value to indicate this case.\n    return -1;\n}\n\nBreed *\nGetBreedFromId(Id<Breed> id)\n{\n    return GetEntryFromId(g::breed_table, id);\n}\n\nUnit *\nGetUnitFromId(Id<Unit> id, Table<Unit> unit_table)\n{\n    TIMED_BLOCK;\n    return GetEntryFromId(unit_table, id);\n}\n\nvoid\nFullHealUnit(Id<Unit> id)\n{\n    Unit *unit = GetUnitFromId(id);\n    if(!unit) return;\n\n    unit->cur_traits = unit->max_traits;\n}\n\nId<Breed>\nRandomBreedIdByTier(int tier)\n{\n    Array<Id<Breed>> valid_ids = CreateTempArray<Id<Breed>>(g::breed_table.entry_count);\n    for(int i=0; i<g::breed_table.entry_count; ++i)\n    {\n        auto &entry = g::breed_table.entries[i]; // alias\n        Breed &breed = entry.data; // alias\n        if(!breed.init) continue;\n\n        if(breed.tier == tier) valid_ids += entry.id;\n    }\n\n    int chosen_index = RandomU32(0, valid_ids.count-1);\n    return valid_ids[chosen_index];\n}",
			"file": "src/unit.cpp",
			"file_size": 26598,
			"file_write_time": 132484128240834498,
			"settings":
			{
				"buffer_size": 25770,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/vec.cpp",
			"settings":
			{
				"buffer_size": 8269,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/imgui.cpp",
			"settings":
			{
				"buffer_size": 10242,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ability_button.cpp",
			"settings":
			{
				"buffer_size": 3788,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ability_button.h",
			"settings":
			{
				"buffer_size": 230,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/const.h",
			"settings":
			{
				"buffer_size": 20700,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inc",
				"Increment Selection"
			],
			[
				"incre",
				"Increment Selection"
			],
			[
				"INCRE",
				"Increment Selection"
			],
			[
				"lower ",
				"Convert Case: Lower Case"
			],
			[
				"Incre",
				"Increment Selection"
			],
			[
				"increm",
				"Increment Selection"
			],
			[
				"increment",
				"Increment Selection"
			],
			[
				"build",
				"Build With: buildbat"
			],
			[
				"open",
				"PackageResourceViewer: Open Resource"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"space",
				"Indentation: Convert to Spaces"
			],
			[
				"ortho",
				"Project: Refresh Folders"
			],
			[
				"util",
				"Permute Lines: Reverse"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"selec",
				"SelectiveUppercase: Uppercase selection words"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"Inc",
				"Indentation: Convert to Spaces"
			],
			[
				"increme",
				"Increment Selection"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"project",
				"Project: Add Folder"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"syntax",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"buildv",
				"Disable/Enable buildview for this window"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"toggle menu",
				"View: Toggle Menu"
			],
			[
				"menu",
				"View: Toggle Menu"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 238.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/color-c"
	],
	"file_history":
	[
		"/C/color-c/logs/log.txt",
		"/C/color-c/src/ability_button.h",
		"/C/color-c/src/ability.h",
		"/C/color-c/src/traitset.h",
		"/C/color-c/src/traitset.cpp",
		"/C/color-c/src/const.h",
		"/C/color-c/src/ability.cpp",
		"/D/work/programming/playground/src/main.cpp",
		"/C/color-c/color-c.sublime-project",
		"/C/color-c/game.exe",
		"/D/work/programming/playground/playground.sublime-project",
		"/C/color-c/src/text_render.cpp",
		"/C/color-c/src/battle.cpp",
		"/C/color-c/src/text_render.h",
		"/C/color-c/src/global.h",
		"/C/color-c/src/draw.cpp",
		"/C/color-c/src/editor.h",
		"/C/color-c/src/memory.cpp",
		"/C/color-c/src/string.h",
		"/C/color-c/src/string.cpp",
		"/C/color-c/src/array.h",
		"/C/color-c/src/editor.cpp",
		"/C/color-c/_/todo.txt",
		"/C/color-c/_/todo_design.txt",
		"/C/color-c/data/breed.dat",
		"/C/color-c/src/game.h",
		"/C/color-c/src/game.cpp",
		"/C/color-c/src/meta_text_parsing.cpp",
		"/C/color-c/src/frametimes_draw.h",
		"/C/color-c/src/frametimes_draw.cpp",
		"/C/color-c/src/main_menu.cpp",
		"/C/color-c/src/imgui.h",
		"/C/color-c/src/imgui.cpp",
		"/C/color-c/src/draw.h",
		"/C/color-c/src/opengl.cpp",
		"/C/color-c/src/debug_overlay.h",
		"/C/color-c/src/opengl.h",
		"/C/color-c/src/buffer.cpp",
		"/C/Users/Harm/Desktop/rbg-multiple-cu-breakpoints-bug/game.cpp",
		"/C/Users/Harm/Desktop/rbg-multiple-cu-breakpoints-bug/platform.cpp",
		"/C/Users/Harm/Desktop/rbg-multiple-cu-breakpoints-bug/util.cpp",
		"/C/Users/Harm/Desktop/rbg-multiple-cu-breakpoints-bug/steps_to_reproduce.txt",
		"/C/Users/Harm/Downloads/remedybg-breakpoint-bug-mwe/remedy-bug/platform.cpp",
		"/C/Users/Harm/Downloads/remedybg-breakpoint-bug-mwe/remedy-bug/steps_to_reproduce.txt",
		"/C/color-c/src/win32_platform.cpp",
		"/C/color-c/src/unit.cpp",
		"/C/color-c/src/campaign.cpp",
		"/C/color-c/src/camera.cpp",
		"/C/color-c/data/ability.dat",
		"/C/color-c/src/debug.cpp",
		"/C/color-c/src/table_draw.cpp",
		"/C/color-c/src/effect.cpp",
		"/C/color-c/src/unit.h",
		"/C/color-c/src/table.h",
		"/C/color-c/src/passive_skill_tree.cpp",
		"/C/color-c/src/table.cpp",
		"/C/color-c/src/table_draw.h",
		"/C/color-c/src/game_code_include.cpp",
		"/C/color-c/src/enemy_ai.h",
		"/C/color-c/src/battle.h",
		"/C/color-c/src/intent.h",
		"/C/color-c/src/effect.h",
		"/C/color-c/src/enemy_ai.cpp",
		"/C/color-c/src/array.cpp",
		"/C/color-c/src/meta_print.cpp",
		"/C/color-c/src/meta_print.h",
		"/C/color-c/src/meta_print(manual).cpp",
		"/C/color-c/src/meta_print(manual).h",
		"/C/color-c/build/b.bat",
		"/C/color-c/src/win32_work_queue.cpp",
		"/C/color-c/src/camera.h",
		"/C/color-c/src/shader/gaussian_blur.cs.glsl",
		"/C/color-c/src/node_graph.cpp",
		"/C/color-c/_/design.txt",
		"/C/color-c/_/todo_technical.txt",
		"/C/color-c/_/performance_relevant_decisions.txt",
		"/C/color-c/src/memory.h",
		"/C/color-c/src/win32_work_queue.h",
		"/C/color-c/src/random.cpp",
		"/C/color-c/logs/critical.log",
		"/C/color-c/src/pool.cpp",
		"/C/color-c/build/work_queue_draw.cpp",
		"/C/color-c/src/campaign.h",
		"/C/color-c/src/memory_draw.cpp",
		"/C/color-c/src/pool.h",
		"/C/color-c/src/memory_draw.h",
		"/C/color-c/src/ring_buffer.h",
		"/C/color-c/src/node_graph.h",
		"/C/color-c/src/generate_node_graph_params.h",
		"/C/color-c/src/vec.cpp",
		"/C/color-c/src/test_mode.cpp",
		"/C/color-c/src/work_entry.h",
		"/C/color-c/src/ring_buffer.cpp",
		"/C/color-c/src/better_text_parsing.h",
		"/C/color-c/src/meta.cpp",
		"/C/color-c/src/macros.h",
		"/C/color-c/src/battle_unit.h",
		"/C/color-c/src/meta_text_parsing.h",
		"/C/color-c/src/options_menu.cpp",
		"/C/color-c/src/input.cpp",
		"/C/color-c/src/input.h",
		"/C/color-c/src/platform_include.cpp",
		"/C/color-c/src/stack.h",
		"/C/color-c/src/log.cpp",
		"/C/color-c/src/util.cpp",
		"/C/color-c/src/input_vk_constants.h",
		"/C/color-c/src/win32_platform.h",
		"/C/color-c/src/game_state.h",
		"/C/color-c/src/math.cpp",
		"/C/color-c/src/map.h",
		"/C/color-c/src/map.cpp",
		"/C/color-c/src/room.h",
		"/C/color-c/src/debug.h",
		"/C/color-c/src/platform.h",
		"/C/color-c/src/main_menu.h",
		"/C/color-c/src/debug_window.h",
		"/C/color-c/src/utf32string.cpp",
		"/C/color-c/src/text_parsing.cpp",
		"/C/color-c/src/text_parsing.h",
		"/C/color-c/src/util.h",
		"/C/color-c/logs/DebugTimings.txt",
		"/C/color-c/src/better_text_parsing.cpp",
		"/C/color-c/src/shader/outline.cs.glsl",
		"/C/color-c/src/color_vertex.glsl",
		"/C/color-c/src/font_loading.cpp",
		"/C/color-c/src/sprite.cpp",
		"/C/color-c/src/uv_fragment.glsl",
		"/C/color-c/src/log.h"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 197.0,
		"where_history":
		[
			"C:\\color-c\\src, -*.i",
			"D:\\work\\programming\\color-c\\src, -*.i",
			"D:\\work\\programming\\color-c\\src",
			"D:\\work\\programming\\color-c\\src\\[^\\]*.cpp",
			"D:\\work\\programming\\color-c\\src\\*.cpp, D:\\work\\programming\\color-c\\src\\*.h",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype\\*",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\freetype\\*",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\freetype",
			"D:\\work\\programming\\color-c\\src, -\\freetype\\",
			"D:\\work\\programming\\color-c\\src, -*\\freetype\\",
			"D:\\work\\programming\\color-c\\src, -freetype\\*",
			"D:\\work\\programming\\color-c\\src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CheckValidTarget",
			"GenerateInferred",
			"Invalid TargetClass encountered",
			"intent",
			"DrawAbilityButton",
			"unit",
			"DrawAbilityInfoBox",
			"RectRight",
			"RectTopRight",
			"DrawLine",
			"DrawAbilityInfoBox",
			"Card",
			"AbilityCard",
			"DrawTextMultiline",
			"StringDataFrom",
			"ScratchString",
			"Scratch",
			"string",
			"temp_string",
			"temp",
			"TempString",
			"reset",
			"req ",
			"GenerateInputElementString",
			"ability_property_types",
			"F11",
			"GPU Frametime",
			"search_panel",
			"points to location",
			"Clear",
			"Enable",
			"ListPanel_",
			"list",
			"preview",
			"1600",
			"preview",
			"60fps",
			"60",
			"1600",
			"window_size",
			"1600",
			"enemy_count",
			"DoAi",
			"1,3",
			"DrawTable",
			"GenerateEventsFromIntent",
			"preview_",
			"IntentTraitChangesForUnits",
			"CalculateAdjustedDamage",
			"UnitInUnit",
			"preview_events",
			"EventTraitChangesForUnit",
			"preview",
			"GenerateEnemyIntents",
			"intent.",
			"intents",
			"permutation_values",
			"DoAi",
			"DoAiStuff",
			"ScoreBattleState3",
			"enemy_traitset_changes",
			"ally_traitset_changes",
			"best_choice",
			"arena_id",
			"action",
			"traitset_changes",
			"ally_traitset_changes",
			"max_ally_traitsets",
			"integer",
			"int'",
			"action",
			"actions",
			"AiAction",
			"ally_units",
			"all_allies",
			"arrays",
			"enum class Team",
			"struct Intent",
			"intent",
			"text",
			"font",
			"frametime_graph_state",
			"PushUi",
			"fnsig_glGetQueryObjectiv",
			"opengl3",
			"opengl",
			"Pressed(KeyBind::Select",
			"LMB",
			"Log(\"",
			"Log(",
			"Log(\"",
			"Log(",
			"Temp",
			"ThreadProc",
			"    }\n    }\nThreadProc",
			"    }\nThreadProc",
			"ThreadProc",
			"WAIT_TIMEOUT returned",
			"DeleteEntry",
			"thread_count",
			"CreateEntry",
			"arena_pool.",
			"pool",
			"DeleteEntry",
			"max_speed",
			"StepNodeGraphForceSimulation",
			"shift",
			"KeyBind::Select",
			"selected_unit_id",
			"SetSelectedUnit",
			"Valid",
			"Selected",
			"player_intent",
			"GenerateInferredUnitSet",
			"preview_events",
			"AllocTable",
			"InitBattle",
			"typeid",
			"type_of",
			"type",
			"type_id",
			"g_work_queue_system",
			"WorkQueueSystem",
			"CreateWorkQueue",
			"GenerateInferredUnitSet",
			"AppendEmptyElement",
			"ValidArray",
			"AllocateArrayFromPlatform"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"traitset_changes",
			"intent",
			"intents",
			"arena_pool->",
			"battle->units",
			"battle->units_",
			"enemy_pen",
			"text_color.",
			".rect.size",
			".rect.size.y",
			"table->",
			"ui_container",
			"state->",
			"game->debug_overlay.dragging_index",
			"",
			"padded_button_rect",
			"child_size",
			"child_pos",
			".y",
			"unit",
			"focus",
			"armor",
			"ability->",
			"armor",
			"focus",
			".focus",
			"end",
			"start",
			"focus",
			"armor",
			"focus",
			"",
			"ai::",
			"p",
			"battle->intents",
			"graph.",
			"vec",
			"camera.",
			"camera->",
			".y",
			"end",
			"rect",
			"queue",
			"/",
			"graph->",
			"b",
			"a",
			"graph",
			"b",
			"a",
			"graph",
			"params",
			".b",
			".a",
			"graph",
			", edge_percent, &t, &u",
			", edge_percent, &t, &t",
			"cam_move_speed",
			"fprintf(&",
			"in_file",
			"KeyBind keybind",
			"LineHeight",
			"tier.",
			"tc",
			"GetIndexFromName",
			"selected",
			"tc",
			"input",
			"ipnut",
			"UnitSet",
			"FromId",
			"ability_ids",
			"breed",
			"Breed",
			"",
			"Id",
			"FromId",
			"id",
			"AllocArena",
			"",
			"Table",
			"UnitSet",
			"(int)AbilityPropertyIndex",
			"].text.length",
			"editor->input_elements",
			"search_panel_layout",
			"TokenType_",
			"*p",
			"active_string->",
			"active_string",
			"#include \"utf32string.h\"",
			"char",
			"",
			"//log",
			"Utf32String",
			"Utf32FixedString",
			"arena->",
			"arena",
			"caster",
			"DamageIgnoreArmor",
			"ability->",
			"requires",
			"TokenMatchesString(token,",
			"-",
			"EffectParams_",
			">",
			"valid",
			"lcg->",
			"battle->",
			"layout.font->",
			"damage",
			"timer->max",
			"timer->min",
			"timer->speed",
			"battle->",
			"all_targets_clean",
			"target.",
			"c::max_battle",
			"char_size.y",
			"char_size.x",
			"font.face",
			"FAST_FUNCTION",
			"SLOW_FUNCTION",
			"OPTIMIZING_FUNCTION",
			"FASTSLOW_FUNCTION",
			"font->",
			"entry->",
			"Length(traitset_string)"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/battle.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 60474,
						"regions":
						{
						},
						"selection":
						[
							[
								2898,
								2898
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 784.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/game_code_include.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1321,
						"regions":
						{
						},
						"selection":
						[
							[
								1321,
								1321
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/imgui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1954,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 429.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/todo_session.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 183,
						"regions":
						{
						},
						"selection":
						[
							[
								183,
								183
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "data/ability.dat",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2711,
						"regions":
						{
						},
						"selection":
						[
							[
								624,
								624
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 156.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/editor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16306,
						"regions":
						{
						},
						"selection":
						[
							[
								7346,
								7346
							],
							[
								7513,
								7513
							],
							[
								7680,
								7680
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1919.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/battle.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2224,
						"regions":
						{
						},
						"selection":
						[
							[
								1942,
								1942
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 711.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "_/todo.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16367,
						"regions":
						{
						},
						"selection":
						[
							[
								15374,
								15374
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1982.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "logs/log.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9450981,
						"regions":
						{
						},
						"selection":
						[
							[
								9442388,
								9442388
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 5284857.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/draw.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7433,
						"regions":
						{
						},
						"selection":
						[
							[
								2274,
								2274
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 780.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8407,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										211,
										223
									],
									[
										581,
										593
									],
									[
										970,
										982
									],
									[
										1174,
										1186
									],
									[
										1417,
										1429
									],
									[
										1771,
										1783
									],
									[
										2054,
										2066
									],
									[
										2329,
										2341
									],
									[
										2539,
										2551
									],
									[
										2753,
										2765
									],
									[
										2969,
										2987
									],
									[
										3245,
										3263
									],
									[
										3444,
										3462
									],
									[
										3736,
										3754
									],
									[
										4074,
										4092
									],
									[
										4309,
										4327
									],
									[
										4769,
										4787
									],
									[
										5058,
										5089
									],
									[
										5187,
										5218
									],
									[
										5500,
										5516
									],
									[
										5757,
										5773
									],
									[
										6029,
										6045
									],
									[
										6310,
										6326
									],
									[
										6637,
										6653
									],
									[
										6804,
										6820
									],
									[
										7088,
										7104
									],
									[
										7285,
										7301
									],
									[
										7595,
										7611
									],
									[
										7762,
										7778
									],
									[
										8046,
										8062
									],
									[
										8243,
										8259
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								7604,
								7604
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2626.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/unit.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25770,
						"regions":
						{
						},
						"selection":
						[
							[
								9104,
								9104
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3680.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/vec.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8269,
						"regions":
						{
						},
						"selection":
						[
							[
								5470,
								5470
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3692.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 9,
					"file": "src/draw.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7433,
						"regions":
						{
						},
						"selection":
						[
							[
								5360,
								5346
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2069.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "src/battle.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 60474,
						"regions":
						{
						},
						"selection":
						[
							[
								39043,
								39043
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12234.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/unit.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25770,
						"regions":
						{
						},
						"selection":
						[
							[
								10187,
								10187
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4403.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/imgui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10242,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/ability_button.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3788,
						"regions":
						{
						},
						"selection":
						[
							[
								989,
								989
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 273.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/ability_button.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 230,
						"regions":
						{
						},
						"selection":
						[
							[
								189,
								189
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/imgui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1954,
						"regions":
						{
						},
						"selection":
						[
							[
								119,
								119
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/const.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20700,
						"regions":
						{
						},
						"selection":
						[
							[
								20216,
								20218
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7085.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 213.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/buildbat.sublime-build",
	"project": "color-c.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"log",
				"logs\\log.txt"
			],
			[
				"todo",
				"_\\todo.txt"
			],
			[
				"const",
				"src\\const.h"
			],
			[
				"imgui",
				"src\\imgui.h"
			],
			[
				"game",
				"src\\game_code_include.cpp"
			],
			[
				"imguih",
				"src\\imgui.h"
			],
			[
				"draw",
				"src\\draw.cpp"
			],
			[
				"sess",
				"src\\todo_session.txt"
			],
			[
				"batt",
				"src\\battle.cpp"
			],
			[
				"edit",
				"src\\editor.cpp"
			],
			[
				"abi",
				"data\\ability.dat"
			],
			[
				"trait",
				"src\\traitset.cpp"
			],
			[
				"ability",
				"src\\ability.cpp"
			],
			[
				"battle",
				"src\\battle.cpp"
			],
			[
				"cons",
				"src\\const.h"
			],
			[
				"globa",
				"src\\global.h"
			],
			[
				"textre",
				"src\\text_render.cpp"
			],
			[
				"memory",
				"src\\memory.cpp"
			],
			[
				"string",
				"src\\string.cpp"
			],
			[
				"breed",
				"data\\breed.dat"
			],
			[
				"editor",
				"src\\editor.cpp"
			],
			[
				"text",
				"src\\text_render.cpp"
			],
			[
				"opengl",
				"src\\opengl.h"
			],
			[
				"main",
				"src\\main_menu.cpp"
			],
			[
				"openg",
				"src\\opengl.cpp"
			],
			[
				"win32",
				"src\\win32_platform.cpp"
			],
			[
				"table",
				"src\\table_draw.cpp"
			],
			[
				"framet",
				"src\\frametimes_draw.cpp"
			],
			[
				"debug",
				"src\\debug.cpp"
			],
			[
				"gamec",
				"src\\game.cpp"
			],
			[
				"cam",
				"src\\camera.cpp"
			],
			[
				"glob",
				"src\\global.h"
			],
			[
				"effec",
				"src\\effect.cpp"
			],
			[
				"abili",
				"data\\ability.dat"
			],
			[
				"camp",
				"src\\campaign.cpp"
			],
			[
				"table_d",
				"src\\table_draw.cpp"
			],
			[
				"inc",
				"src\\game_code_include.cpp"
			],
			[
				"pass",
				"src\\passive_skill_tree.cpp"
			],
			[
				"unit",
				"src\\unit.cpp"
			],
			[
				"tableh",
				"src\\table.h"
			],
			[
				"global",
				"src\\global.h"
			],
			[
				"nith",
				"src\\unit.h"
			],
			[
				"traitset",
				"src\\traitset.h"
			],
			[
				"arrayh",
				"src\\array.h"
			],
			[
				"unith",
				"src\\unit.h"
			],
			[
				"battleh",
				"src\\battle.h"
			],
			[
				"ab",
				"data\\ability.dat"
			],
			[
				"array",
				"src\\array.h"
			],
			[
				"metaprint",
				"src\\meta_print(manual).cpp"
			],
			[
				"metaprintma",
				"src\\meta_print(manual).h"
			],
			[
				"meta_printh",
				"src\\meta_print.h"
			],
			[
				"enemyai",
				"src\\enemy_ai.cpp"
			],
			[
				"bb",
				"build\\b.bat"
			],
			[
				"gameh",
				"src\\game.h"
			],
			[
				"blur",
				"src\\shader\\gaussian_blur.cs.glsl"
			],
			[
				"rand",
				"src\\random.cpp"
			],
			[
				"node",
				"src\\node_graph.cpp"
			],
			[
				"cri",
				"logs\\critical.log"
			],
			[
				"frametime",
				"src\\frametimes_draw.cpp"
			],
			[
				"crit",
				"logs\\critical.log"
			],
			[
				"con",
				"src\\const.h"
			],
			[
				"queue",
				"src\\win32_work_queue.h"
			],
			[
				"memr",
				"src\\memory.h"
			],
			[
				"workque",
				"src\\win32_work_queue.cpp"
			],
			[
				"mem",
				"src\\memory.cpp"
			],
			[
				"arra",
				"src\\array.h"
			],
			[
				"pool",
				"src\\pool.cpp"
			],
			[
				"memorydraw",
				"src\\memory_draw.cpp"
			],
			[
				"ringbu",
				"src\\ring_buffer.h"
			],
			[
				"memor",
				"src\\memory.cpp"
			],
			[
				"logt",
				"logs\\log.txt"
			],
			[
				"test",
				"src\\test_mode.cpp"
			],
			[
				"abilitydat",
				"data\\ability.dat"
			],
			[
				"intent",
				"src\\intent.h"
			],
			[
				"glo",
				"src\\global.h"
			],
			[
				"win32_wor",
				"src\\win32_work_queue.cpp"
			],
			[
				"ringbuf",
				"src\\ring_buffer.h"
			],
			[
				"workentr",
				"src\\work_entry.h"
			],
			[
				"workqu",
				"src\\win32_work_queue.h"
			],
			[
				"better",
				"src\\better_text_parsing.h"
			],
			[
				"Battle",
				"src\\battle.h"
			],
			[
				"macro",
				"src\\macros.h"
			],
			[
				"meta",
				"src\\meta.cpp"
			],
			[
				"metapr",
				"src\\meta_print.cpp"
			],
			[
				"batteh",
				"src\\battle.h"
			],
			[
				"bat",
				"src\\battle.cpp"
			],
			[
				"frame",
				"src\\frametimes_draw.cpp"
			],
			[
				"option",
				"src\\options_menu.cpp"
			],
			[
				"img",
				"src\\imgui.cpp"
			],
			[
				"_draw",
				"src\\frametimes_draw.cpp"
			],
			[
				"include",
				"src\\game_code_include.cpp"
			],
			[
				"plat",
				"src\\platform_include.cpp"
			],
			[
				"camera",
				"src\\camera.cpp"
			],
			[
				"inputc",
				"src\\input.cpp"
			],
			[
				"input",
				"src\\input.cpp"
			],
			[
				"inclu",
				"src\\game_code_include.cpp"
			],
			[
				"dbeugover",
				"src\\debug_overlay.h"
			],
			[
				"vec",
				"src\\vec.cpp"
			],
			[
				"util",
				"src\\util.cpp"
			],
			[
				"buffer",
				"src\\ring_buffer.cpp"
			],
			[
				"win",
				"src\\win32_platform.cpp"
			],
			[
				"mat",
				"src\\math.cpp"
			],
			[
				"tabl",
				"src\\table.cpp"
			],
			[
				"bree",
				"data\\breed.dat"
			],
			[
				"gamesta",
				"src\\game_state.h"
			],
			[
				"room",
				"src\\room.h"
			],
			[
				"nodegra",
				"src\\node_graph.cpp"
			],
			[
				"textrend",
				"src\\text_render.cpp"
			],
			[
				"debugover",
				"src\\debug_overlay.h"
			],
			[
				"tod",
				"_\\todo.txt"
			],
			[
				"iguih",
				"src\\imgui.h"
			],
			[
				"memoryd",
				"src\\memory_draw.cpp"
			],
			[
				"win32work",
				"src\\win32_work_queue.cpp"
			],
			[
				"worke",
				"src\\work_entry.h"
			],
			[
				"utf32",
				"src\\utf32string.cpp"
			],
			[
				"textpars",
				"src\\text_parsing.cpp"
			],
			[
				"textpar",
				"src\\text_parsing.h"
			],
			[
				"strinh",
				"src\\string.h"
			],
			[
				"memry",
				"src\\memory.cpp"
			],
			[
				"lo",
				"logs\\log.txt"
			],
			[
				"memorydarw",
				"src\\memory_draw.cpp"
			],
			[
				"work",
				"src\\work_entry.h"
			],
			[
				"win32w",
				"src\\win32_work_queue.cpp"
			],
			[
				"b",
				"build\\b.bat"
			],
			[
				"gam",
				"src\\game.cpp"
			],
			[
				"tab",
				"src\\table.cpp"
			],
			[
				"lot",
				"logs\\log.txt"
			],
			[
				"timin",
				"logs\\DebugTimings.txt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 198.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
