{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"SetCam",
				"SetCameraView"
			],
			[
				"align",
				"aligned_button_rect"
			],
			[
				"fram",
				"frametime_graph_state"
			],
			[
				"framet",
				"frametimes"
			],
			[
				"frametime",
				"frametime_graph_state"
			],
			[
				"Frametim",
				"FrametimeGraphState"
			],
			[
				"frma",
				"frametime_count"
			],
			[
				"siz_",
				"size_in_bytes"
			],
			[
				"frame",
				"frame_times_ms"
			],
			[
				"number",
				"number_of_frame_times"
			],
			[
				"Alloc",
				"AllocateMemory"
			],
			[
				"entry_",
				"entry_cell_size"
			],
			[
				"entri",
				"entries_per_dimension"
			],
			[
				"en",
				"entries_per_dimension"
			],
			[
				"unit_slot",
				"unit_slot_padding"
			],
			[
				"enemy",
				"enemy_units"
			],
			[
				"random",
				"random_unit"
			],
			[
				"Name",
				"CreateUnitByName"
			],
			[
				"Campaign",
				"CampaignState"
			],
			[
				"Crate",
				"CreateUnitByName"
			],
			[
				"Mouse",
				"MouseFocusTaken"
			],
			[
				"draggin",
				"dragging_index"
			],
			[
				"cure",
				"current_index"
			],
			[
				"window",
				"window_rects"
			],
			[
				"debug",
				"debug_overlay"
			],
			[
				"button",
				"button_layout"
			],
			[
				"OverL",
				"OverlayOption_strings"
			],
			[
				"thread",
				"thread_arena_id"
			],
			[
				"thread_are",
				"thread_arena_id"
			],
			[
				"exit",
				"exit_requested"
			],
			[
				"deleted",
				"deleted_entry"
			],
			[
				"mBind",
				"mBindPlatformFunction"
			],
			[
				"arne",
				"arena_table_mutex"
			],
			[
				"arean",
				"arena_table_mutex"
			],
			[
				"arena_table",
				"arena_table_mutex"
			],
			[
				"Relese",
				"ReleaseMutex"
			],
			[
				"threadare",
				"thread_arena_debug_name"
			],
			[
				"scratc",
				"scratch_arena"
			],
			[
				"scrac",
				"scratch_arena"
			],
			[
				"scrat",
				"scratch_arena"
			],
			[
				"per_Fra",
				"per_frame_arena_id"
			],
			[
				"arena",
				"arena_count"
			],
			[
				"prepass",
				"prepass_framebuffer"
			],
			[
				"prepas",
				"prepass_framebuffer"
			],
			[
				"text",
				"texture_id"
			],
			[
				"blur",
				"blur_shader"
			],
			[
				"d_",
				"d_color_y"
			],
			[
				"outline",
				"outline_shader"
			],
			[
				"Gener",
				"GenerateComputeShaderFromFile"
			],
			[
				"GLTEXT",
				"GL_TEXTURE0"
			],
			[
				"Lo",
				"LogGlError"
			],
			[
				"dst",
				"dst_coords"
			],
			[
				"Bind",
				"BindTexture"
			],
			[
				"GLTE",
				"GL_TEXTURE1"
			],
			[
				"GL_TEXTU",
				"GL_TEXTURE0"
			],
			[
				"blurd",
				"blur_dst_texture"
			],
			[
				"Pro",
				"ProgramUniform1i"
			],
			[
				"blur_",
				"blur_data"
			],
			[
				"GL_TE",
				"GL_TEXTURE_2D"
			],
			[
				"prepasS_",
				"prepass_texture"
			],
			[
				"GL_TEXT",
				"GL_TEXTURE0"
			],
			[
				"GL_TEXTUR",
				"GL_TEXTURE_2D"
			],
			[
				"texco",
				"texcoords_attr"
			],
			[
				"guas",
				"gaussian_blur_shader"
			],
			[
				"trait_chang",
				"trait_change_text_layout"
			],
			[
				"trait_change",
				"trait_change_string"
			],
			[
				"utf32",
				"utf32_char"
			],
			[
				"Next",
				"NextAsUtf32Char"
			],
			[
				"traitchange",
				"trait_change_text_layout"
			],
			[
				"trait_chan",
				"trait_change_string"
			],
			[
				"FromAre",
				"AllocStringDataFromArena"
			],
			[
				"ability_icon",
				"ability_icon_button_layout"
			],
			[
				"aligned",
				"aligned_child"
			],
			[
				"abilityicon",
				"ability_icon_button_layout"
			],
			[
				"Aci",
				"ActivateColorShader"
			],
			[
				"Active",
				"ActivateColorShader"
			],
			[
				"current",
				"current_state"
			],
			[
				"cur_pot",
				"cur_potential"
			],
			[
				"best_",
				"best_score"
			],
			[
				"pote",
				"ability_potential"
			],
			[
				"abs",
				"abs_change"
			],
			[
				"rel",
				"rel_change"
			],
			[
				"best",
				"best_score"
			],
			[
				"abilit_",
				"ability_id"
			],
			[
				"tier_pote",
				"tier_potentials"
			],
			[
				"next_",
				"next_tier_index"
			],
			[
				"requir",
				"required_traits"
			],
			[
				"cur_tier",
				"cur_tier_reqs"
			],
			[
				"cur_",
				"cur_tier_index"
			],
			[
				"armor",
				"armor_score"
			],
			[
				"focus",
				"focus_score"
			],
			[
				"aro",
				"armor_range"
			],
			[
				"upgrade",
				"upgrade_potential"
			],
			[
				"down",
				"downgrade_points"
			],
			[
				"prev_",
				"prev_tier_potential"
			],
			[
				"upgade",
				"upgrade_ratio"
			],
			[
				"total",
				"total_points"
			],
			[
				"next",
				"next_tier"
			],
			[
				"upgrad",
				"upgrade_points"
			],
			[
				"cur_pote",
				"cur_tier_potential"
			],
			[
				"cur",
				"cur_tier_potential"
			],
			[
				"ability",
				"ability_count"
			],
			[
				"potent",
				"potential_before_change"
			],
			[
				"potential_e",
				"potential_after_change"
			],
			[
				"ally_",
				"ally_units"
			],
			[
				"ally_trait",
				"ally_traitset_changes"
			],
			[
				"Valid",
				"ValidAbility"
			],
			[
				"init",
				"initial_enemy_traitsets"
			],
			[
				"breed",
				"breed_table"
			],
			[
				"initia",
				"initial_ally_traitsets"
			],
			[
				"enemytraitset",
				"enemy_traitset_changes"
			],
			[
				"enemy_trait",
				"enemy_traitset_changes"
			],
			[
				"traitset",
				"traitset_changes"
			],
			[
				"trait",
				"traitset_changes"
			],
			[
				"ally_tr",
				"ally_traitset_changes"
			],
			[
				"enemyrtai",
				"enemy_traitset_changes"
			],
			[
				"allytrait",
				"ally_traitset_changes"
			],
			[
				"win32_time",
				"win32_TimeElapsedMs"
			],
			[
				"permutat",
				"permutation_count"
			],
			[
				"Create",
				"CreateUnitByName"
			],
			[
				"unit_",
				"unit_indices"
			],
			[
				"equi",
				"equivalent_line_count"
			],
			[
				"unit_ind",
				"unit_indices_index"
			],
			[
				"length",
				"length_of_one_permutation"
			],
			[
				"permut",
				"permutation_start"
			],
			[
				"permu",
				"permutation_start"
			],
			[
				"lent",
				"length_of_one_permutation"
			],
			[
				"active",
				"active_unitset"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/text_render.cpp",
			"settings":
			{
				"buffer_size": 30966,
				"line_ending": "Windows"
			}
		},
		{
			"file": "_/todo.txt",
			"settings":
			{
				"buffer_size": 9333,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/input.cpp",
			"settings":
			{
				"buffer_size": 2721,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 148 files for \"MouseFocusTaken\"\n\nC:\\color-c\\src\\draw.cpp:\n  257      }\n  258  \n  259:     if(response.hovered and !MouseFocusTaken())\n  260      {\n  261          // Button is being hovered\n  ...\n  279      }\n  280  \n  281:     if(MouseFocusTaken())\n  282      { // Disregard most of the response values if the focus was already taken by something else.\n  283          response = {};\n\nC:\\color-c\\src\\game.cpp:\n  306  \n  307              auto response = Button(OverlayOption_userstrings[i]);\n  308:             if(response.pressed and !MouseFocusTaken()) game->debug_overlay.option_active[i] = !game->debug_overlay.option_active[i];\n  309              game->input.mouse_focus_taken = game->input.mouse_focus_taken || response.hovered;\n  310          }\n\nC:\\color-c\\src\\input.h:\n   46  int MouseScroll();\n   47  bool MouseInRect(Rect rect, bool absolute = false);\n   48: bool MouseFocusTaken();\n   49  \n   50  bool Down(const InputState *input, u8 key);\n\n4 matches across 3 files\n\n\nSearching 148 files for \"TakeMouseFocus\"\n\nC:\\color-c\\src\\draw.cpp:\n  260      if(response.hovered and !MouseFocusIsTaken())\n  261      {\n  262:         has_focus = TakeMouseFocus();\n  263          // Button is being hovered\n  264          DrawUnfilledRect(aligned_button_rect, layout.button_hover_color);\n\nC:\\color-c\\src\\game.cpp:\n  306  \n  307              auto response = Button(OverlayOption_userstrings[i]);\n  308:             if(response.pressed and TakeMouseFocus())\n  309                  game->debug_overlay.option_active[i] = !game->debug_overlay.option_active[i];\n  310              //game->input.mouse_focus_taken = game->input.mouse_focus_taken || response.hovered;\n  ...\n  325              Rect window_rect = DrawArenas(*game->arena_pool, window_pos);\n  326  \n  327:             if(MouseInRect(window_rect) and TakeMouseFocus())\n  328              {\n  329                  if(Pressed(vk::LMB))\n  ...\n  344              DrawTimedBlockData(window_pos);\n  345  \n  346:             if(MouseInRect(window_rect) and TakeMouseFocus())\n  347              {\n  348                  if(Pressed(vk::LMB))\n  ...\n  363              DrawUnfilledRect(window_rect, c::white, true);\n  364  \n  365:             if(MouseInRect(window_rect) and TakeMouseFocus())\n  366              {\n  367                  if(Pressed(vk::LMB))\n\nC:\\color-c\\src\\input.cpp:\n  130  // one place in the code can \"take mouse focus\" each frame.\n  131  bool\n  132: TakeMouseFocus()\n  133  {\n  134      if(input::global_input->mouse_focus_taken == false)\n\nC:\\color-c\\src\\input.h:\n   46  int MouseScroll();\n   47  bool MouseInRect(Rect rect, bool absolute = false);\n   48: bool TakeMouseFocus();\n   49  bool MouseFocusIsTaken();\n   50  \n\n7 matches across 4 files\n\n\nSearching 148 files for \"mouse_focus_taken\"\n\nC:\\color-c\\src\\game.cpp:\n  308              if(response.pressed and TakeMouseFocus())\n  309                  game->debug_overlay.option_active[i] = !game->debug_overlay.option_active[i];\n  310:             //game->input.mouse_focus_taken = game->input.mouse_focus_taken || response.hovered;\n  311          }\n  312  \n\nC:\\color-c\\src\\input.cpp:\n  132  TakeMouseFocus()\n  133  {\n  134:     if(input::global_input->mouse_focus_taken == false)\n  135      {\n  136:         input::global_input->mouse_focus_taken = true;\n  137          return true;\n  138      }\n  ...\n  146  MouseFocusIsTaken()\n  147  {\n  148:     return(input::global_input->mouse_focus_taken);\n  149  }\n\nC:\\color-c\\src\\input.h:\n   19      int mouse_scroll;\n   20  \n   21:     bool mouse_focus_taken;\n   22  \n   23      // A utf-32 encoded bytestream which is updated by the platform with translated characters\n\nC:\\color-c\\src\\meta_print.cpp:\n 1950  \tAppendCString(&string, \"  mouse_scroll: %d (int)\\n\", s->mouse_scroll);\n 1951  \n 1952: \tAppendCString(&string, \"  mouse_focus_taken: %d (bool)\\n\", s->mouse_focus_taken);\n 1953  \n 1954  \tAppendCString(&string, \"  utf32_translated_stream: %p (u32 *)\\n\", s->utf32_translated_stream);\n\nC:\\color-c\\src\\win32_platform.cpp:\n  860              game->input.prev_mouse_pos = game->input.mouse_pos;\n  861              win32_GetMousePosF(&game->input.mouse_pos.x, &game->input.mouse_pos.y);\n  862:             game->input.mouse_focus_taken = false;\n  863  \n  864              // Null-terminate the translated stream and give the game input its address.\n\n9 matches across 5 files\n\n\nSearching 148 files for \"Push\"\n\nC:\\color-c\\src\\bitmap.cpp:\n   62  \tstatic const int compression\t= 0x1E;\n   63  \n   64: \t#pragma pack(push, 1)\n   65  \tstruct Header\n   66  \t{\n\nC:\\color-c\\src\\game.cpp:\n  287      // Reset pen position to container origin for all gui containers\n  288      ResetImguiContainer(&game->debug_container);\n  289:     PushCameraTransform()\n  290      if(game->draw_debug_overlay)\n  291      {\n\nC:\\color-c\\src\\log.cpp:\n   29  \n   30  void\n   31: _push_to_log_strings(char *str)\n   32  {\n   33      strcpy(game->log_state.log_strings[(game->log_state.log_cur_index++)%MAX_LOG_COUNT], str);\n   ..\n   47  \n   48  void\n   49: PushLogEntry(char *filename, char *string, ...)\n   50  {\n   51      Log_params params = {};\n   ..\n   62          // We exceeded the length of the formatted_str buffer, so we can only write a partial log\n   63          formatted_str[ArrayCount(params.string)-1] = '\\0'; // vsnprintf wouldn't have null-appended if the buffer was too small.\n   64:         _push_to_log_strings(formatted_str);\n   65:         PushLogEntry(\"logs/log.txt\", \"%s\", formatted_str);\n   66:         PushLogEntry(\"logs/log.txt\", \"ERROR: Maximum log length exceeded (formatted_length=%d). Only partial log was written.\", formatted_length);\n   67          return;\n   68      }\n   ..\n   95          // We exceeded the length of the formatted_str buffer, so we can only write a partial log\n   96          formatted_str[MAX_LOG_LENGTH-1] = '\\0'; // vsnprintf wouldn't have null-appended if the buffer was too small.\n   97:         _push_to_log_strings(formatted_str);\n   98:         PushLogEntry(\"logs/log.txt\", \"%s\", formatted_str);\n   99:         PushLogEntry(\"logs/log.txt\", \"ERROR: Maximum log length exceeded (formatted_length=%d). Only partial log was written.\", formatted_length);\n  100          return;\n  101      }\n  102  \n  103:     PushLogEntry(\"logs/log.txt\", formatted_str);\n  104  }\n  105  \n  ...\n  125          // We exceeded the length of the formatted_str buffer, so we can only write a partial log\n  126          formatted_str[MAX_LOG_LENGTH-1] = '\\0'; // vsnprintf wouldn't have null-appended if the buffer was too small.\n  127:         _push_to_log_strings(formatted_str);\n  128          Log(\"%s\", formatted_str);\n  129          Log(\"ERROR: Maximum log length exceeded (formatted_length=%d). Only partial log was written.\", formatted_length);\n  ...\n  147          // We exceeded the length of the formatted_str buffer, so we can only write a partial log\n  148          formatted_str[MAX_LOG_LENGTH-1] = '\\0'; // vsnprintf wouldn't have null-appended if the buffer was too small.\n  149:         _push_to_log_strings(formatted_str);\n  150          Log(\"%s\", formatted_str);\n  151          Log(\"ERROR: Maximum log length exceeded (formatted_length=%d). Only partial log was written.\", formatted_length);\n\nC:\\color-c\\src\\log.h:\n   18  };\n   19  \n   20: void PushLogEntry(char *filename, char *string, ...);\n   21  void Log(char *string, ...);\n   22  \n\n14 matches across 4 files\n\n\nSearching 148 files for \"SetCamera\"\n\nC:\\color-c\\src\\campaign.cpp:\n  420                      campaign->end_camera.view = map_rect.size/2.f;\n  421  \n  422:                     //SetCameraPos(campaign->camera_start_pos);\n  423                      //MoveCameraToWorldRect(world_space_rect);\n  424                  }\n  ...\n  446  \n  447          //ZoomCameraIntoPoint(1.03f, campaign->start_node_pos);\n  448:         //SetCameraPos( Lerp(campaign->camera_start_pos, campaign->camera_end_pos, t_over_T) );\n  449          Camera lerped_cam = LerpCamera(campaign->start_camera, campaign->end_camera, cubic_t);\n  450:         SetCameraPos(&game->camera, lerped_cam.pos);\n  451:         SetCameraView(&game->camera, PadToAspectRatio(lerped_cam.view, AspectRatio(game->window_size)));\n  452  \n  453          // MoveCameraToWorldRect(&game->camera,\n  ...\n  513          {\n  514              float zoom_amount = m::Pow(c::zoom_sensitivity, -mouse_scroll);\n  515:             SetCameraView(&game->camera, zoom_amount * game->camera.view);\n  516          }\n  517  \n  ...\n  556          }\n  557  \n  558:         SetCameraPos(&game->camera, initial_camera.pos);\n  559:         SetCameraView(&game->camera, initial_camera.view);\n  560          //if(map_response.newly_hovered) ResetLow(&campaign->node_pulse_timer);\n  561      }\n  ...\n  589              if(battle_state.finished)\n  590              {\n  591:                 SetCameraPos(&game->camera, campaign->map_camera.pos);\n  592:                 SetCameraView(&game->camera, campaign->map_camera.view);\n  593                  for(auto unit_id : campaign->player_party)\n  594                      FullHealUnit(unit_id);\n\nC:\\color-c\\src\\draw.cpp:\n   32  \n   33  void\n   34: SetCameraPos(Camera *camera, Vec2f camera_pos)\n   35  {\n   36      //game->prev_camera_pos = game->camera_pos;\n   ..\n   44  {\n   45      camera->pos += move;\n   46:     SetCameraPos(camera, camera->pos);\n   47  }\n   48  \n   49  void\n   50: SetCameraView(Camera *camera, Vec2f view)\n   51  {\n   52      camera->view = view;\n   ..\n   72          adjusted_rect.size = {screen_AR / rect_AR * rect.size.x, rect.size.y};\n   73      }\n   74:     SetCameraPos(camera, RectCenter(rect));\n   75:     SetCameraView(camera, adjusted_rect.size);\n   76  }\n   77  \n   78  // void\n   79: // SetCameraZoom(float z)\n   80  // {\n   81  //     game->prev_camera_zoom = game->camera_zoom;\n   ..\n   89  // {\n   90  //     Vec2f new_camera_pos = point - (1/z)*(point - game->camera_pos);\n   91: //     SetCameraPos(new_camera_pos);\n   92  //     game->camera_zoom *= z;\n   93: //     SetCameraZoom(game->camera_zoom);\n   94  // }\n   95  \n   ..\n  118      if(ui)\n  119      {\n  120:         SetCameraPos( &game->camera, initial_cam_pos);\n  121:         SetCameraView(&game->camera, initial_cam_view);\n  122      }\n  123  }\n  ...\n  153      if(ui)\n  154      {\n  155:         SetCameraPos( &game->camera, initial_cam_pos);\n  156:         SetCameraView(&game->camera, initial_cam_view);\n  157      }\n  158  }\n  ...\n  288      if(layout.is_ui)\n  289      {\n  290:         SetCameraPos(&game->camera, initial_camera.pos);\n  291:         SetCameraView(&game->camera, initial_camera.view);\n  292      }\n  293  \n\nC:\\color-c\\src\\draw.h:\n   49  void SetDrawDepth(float depth);\n   50  \n   51: void SetCameraPos(Camera *camera, Vec2f camera_pos);\n   52  void MoveCamera(Camera *camera, Vec2f move);\n   53: void SetCameraView(Camera *camera, Vec2f view);\n   54  void MoveCameraToWorldRect(Camera *camera, Rect rect);\n   55  \n\nC:\\color-c\\src\\game.cpp:\n   77      gl->ProgramUniform2fv(game->uv_shader, 0, 1, (GLfloat*)&game->window_size);\n   78  \n   79:     SetCameraPos(&game->camera, {0.f,0.f});\n   80  \n   81      game->blur_shader = GenerateComputeShaderFromFile(\"src/shader/gaussian_blur.cs.glsl\");\n\nC:\\color-c\\src\\imgui.cpp:\n   95  \n   96  \t// Reset camera transform for non-UI stuff\n   97:     SetCameraPos( &game->camera, initial_cam_pos);\n   98:     SetCameraView(&game->camera, initial_cam_view);\n   99  \n  100  \n\nC:\\color-c\\src\\text_render.cpp:\n  174      MoveCameraToWorldRect(&game->camera, {{0.f,0.f}, {1600.f,900.f}});\n  175      //float initial_cam_zoom = game->camera_zoom;\n  176:     //SetCameraPos({0.f,0.f});\n  177:     //SetCameraZoom(1.f);\n  178  \n  179      Rect text_rect = DrawText(layout, origin, string);\n  180  \n  181:     SetCameraPos(&game->camera, initial_camera.pos);\n  182:     SetCameraView(&game->camera, initial_camera.view);\n  183  \n  184      return text_rect;\n\n32 matches across 6 files\n",
			"settings":
			{
				"buffer_size": 11854,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/draw.cpp",
			"settings":
			{
				"buffer_size": 7406,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/win32_platform.cpp",
			"settings":
			{
				"buffer_size": 29404,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/debug_overlay.h",
			"settings":
			{
				"buffer_size": 456,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/const.h",
			"settings":
			{
				"buffer_size": 19674,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/camera.cpp",
			"settings":
			{
				"buffer_size": 1883,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/camera.h",
			"settings":
			{
				"buffer_size": 485,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/game_code_include.cpp",
			"settings":
			{
				"buffer_size": 1291,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/platform_include.cpp",
			"settings":
			{
				"buffer_size": 916,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/frametimes_draw.cpp",
			"settings":
			{
				"buffer_size": 2629,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/frametimes_draw.h",
			"settings":
			{
				"buffer_size": 187,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/game.cpp",
			"settings":
			{
				"buffer_size": 20757,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/input.h",
			"settings":
			{
				"buffer_size": 1482,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/game.h",
			"settings":
			{
				"buffer_size": 1759,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inc",
				"Increment Selection"
			],
			[
				"incre",
				"Increment Selection"
			],
			[
				"INCRE",
				"Increment Selection"
			],
			[
				"lower ",
				"Convert Case: Lower Case"
			],
			[
				"Incre",
				"Increment Selection"
			],
			[
				"increm",
				"Increment Selection"
			],
			[
				"increment",
				"Increment Selection"
			],
			[
				"build",
				"Build With: buildbat"
			],
			[
				"open",
				"PackageResourceViewer: Open Resource"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"space",
				"Indentation: Convert to Spaces"
			],
			[
				"ortho",
				"Project: Refresh Folders"
			],
			[
				"util",
				"Permute Lines: Reverse"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"selec",
				"SelectiveUppercase: Uppercase selection words"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"Inc",
				"Indentation: Convert to Spaces"
			],
			[
				"increme",
				"Increment Selection"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"project",
				"Project: Add Folder"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"syntax",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"buildv",
				"Disable/Enable buildview for this window"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"toggle menu",
				"View: Toggle Menu"
			],
			[
				"menu",
				"View: Toggle Menu"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 238.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/color-c"
	],
	"file_history":
	[
		"/C/color-c/src/stack.h",
		"/C/color-c/src/win32_platform.cpp",
		"/C/color-c/src/draw.cpp",
		"/C/color-c/src/input.cpp",
		"/C/color-c/src/draw.h",
		"/C/color-c/src/const.h",
		"/C/color-c/src/ring_buffer.cpp",
		"/C/color-c/src/log.cpp",
		"/C/color-c/logs/log.txt",
		"/C/color-c/src/input.h",
		"/C/color-c/src/game.cpp",
		"/C/color-c/src/ring_buffer.h",
		"/C/color-c/src/frametimes_draw.h",
		"/C/color-c/src/memory.cpp",
		"/C/color-c/src/util.cpp",
		"/C/color-c/src/array.cpp",
		"/C/color-c/src/array.h",
		"/C/color-c/src/input_vk_constants.h",
		"/C/color-c/src/imgui.h",
		"/C/color-c/src/imgui.cpp",
		"/C/color-c/src/win32_platform.h",
		"/C/color-c/src/unit.h",
		"/C/color-c/src/game_state.h",
		"/C/color-c/src/game.h",
		"/C/color-c/src/main_menu.cpp",
		"/C/color-c/src/game_code_include.cpp",
		"/C/color-c/src/table_draw.h",
		"/C/color-c/src/win32_work_queue.cpp",
		"/C/color-c/data/breed.dat",
		"/C/color-c/data/ability.dat",
		"/C/color-c/src/unit.cpp",
		"/C/color-c/src/table.cpp",
		"/C/color-c/src/vec.cpp",
		"/C/color-c/src/platform_include.cpp",
		"/C/color-c/src/table_draw.cpp",
		"/C/color-c/src/campaign.cpp",
		"/C/color-c/src/battle.h",
		"/C/color-c/src/battle.cpp",
		"/C/color-c/src/campaign.h",
		"/C/color-c/src/math.cpp",
		"/C/color-c/src/table.h",
		"/C/color-c/src/map.h",
		"/C/color-c/src/map.cpp",
		"/C/color-c/src/room.h",
		"/C/color-c/src/enemy_ai.cpp",
		"/C/color-c/src/pool.h",
		"/C/color-c/src/pool.cpp",
		"/C/color-c/src/node_graph.cpp",
		"/C/color-c/src/text_render.cpp",
		"/C/color-c/src/node_graph.h",
		"/C/color-c/src/memory_draw.cpp",
		"/C/color-c/src/text_render.h",
		"/C/color-c/logs/critical.log",
		"/C/color-c/src/debug_overlay.h",
		"/C/color-c/src/debug.h",
		"/C/color-c/src/debug.cpp",
		"/C/color-c/build/b.bat",
		"/C/color-c/src/memory_draw.h",
		"/C/color-c/src/platform.h",
		"/C/color-c/_/todo.txt",
		"/C/color-c/src/main_menu.h",
		"/C/color-c/src/win32_work_queue.h",
		"/C/color-c/src/debug_window.h",
		"/C/color-c/src/work_entry.h",
		"/C/color-c/src/string.cpp",
		"/C/color-c/src/string.h",
		"/C/color-c/src/editor.cpp",
		"/C/color-c/src/editor.h",
		"/C/color-c/src/memory.h",
		"/C/color-c/src/utf32string.cpp",
		"/C/color-c/src/text_parsing.cpp",
		"/C/color-c/src/text_parsing.h",
		"/C/color-c/src/util.h",
		"/C/color-c/logs/DebugTimings.txt",
		"/C/color-c/_/performance_relevant_decisions.txt",
		"/C/color-c/src/better_text_parsing.cpp",
		"/C/color-c/src/ability.cpp",
		"/C/color-c/src/enemy_ai.h",
		"/C/color-c/src/shader/outline.cs.glsl",
		"/C/color-c/src/opengl.cpp",
		"/C/color-c/src/shader/gaussian_blur.cs.glsl",
		"/C/color-c/src/opengl.h",
		"/C/color-c/src/meta.cpp",
		"/C/color-c/src/meta_print.cpp",
		"/C/color-c/src/color_vertex.glsl",
		"/C/color-c/src/font_loading.cpp",
		"/C/color-c/src/sprite.cpp",
		"/C/color-c/src/uv_fragment.glsl",
		"/C/color-c/src/log.h",
		"/C/color-c/src/meta_text_parsing.cpp",
		"/C/color-c/build/freetype-2.9.1/builds/os2/os2-gcc.mk",
		"/C/color-c/src/uv_vertex.glsl",
		"/C/color-c/src/shader/gaussian_blur.vs.glsl",
		"/C/color-c/src/color_fragment.glsl",
		"/D/work/programming/fps/src/main.cpp",
		"/D/work/programming/fps/src/win32_platform_layer.cpp",
		"/C/color-c/src/ability.h",
		"/C/color-c/src/buffer.h",
		"/C/color-c/src/buffer.cpp",
		"/C/color-c/src/test_mode.cpp",
		"/D/work/programming/fps/src/opengl.cpp",
		"/D/work/programming/fps/src/draw.cpp",
		"/D/work/programming/fps/src/3d.cpp",
		"/D/work/programming/fps/src/game.cpp",
		"/C/color-c/src/align.cpp",
		"/C/color-c/src/align.h",
		"/C/color-c/src/ai_explorer.cpp",
		"/C/color-c/src/geometry.cpp",
		"/C/color-c/src/geometry.h",
		"/C/color-c/src/test_mode.h",
		"/C/color-c/src/ai_explorer.h",
		"/C/color-c/src/traitset.cpp",
		"/C/color-c/src/traitset.h",
		"/C/color-c/src/effect.cpp",
		"/C/color-c/src/effect.h",
		"/C/color-c/src/target_class.h",
		"/C/color-c/src/target_class.cpp",
		"/C/color-c/src/macros.h",
		"/C/color-c/src/random.cpp",
		"/C/color-c/src/scratch.cpp",
		"/C/color-c/src/permutation.cpp",
		"/C/color-c/src/permutation.h",
		"/C/color-c/src/fixed_array.h",
		"/C/color-c/build/game.i",
		"/C/color-c/src/room.cpp",
		"/C/color-c/src/math.h",
		"/C/color-c/src/timer.cpp",
		"/C/color-c/src/camera.cpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 164.0,
		"where_history":
		[
			"C:\\color-c\\src, -*.i",
			"D:\\work\\programming\\color-c\\src, -*.i",
			"D:\\work\\programming\\color-c\\src",
			"D:\\work\\programming\\color-c\\src\\[^\\]*.cpp",
			"D:\\work\\programming\\color-c\\src\\*.cpp, D:\\work\\programming\\color-c\\src\\*.h",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype\\*",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\src\\freetype",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\freetype\\*",
			"D:\\work\\programming\\color-c\\src, -D:\\work\\programming\\color-c\\freetype",
			"D:\\work\\programming\\color-c\\src, -\\freetype\\",
			"D:\\work\\programming\\color-c\\src, -*\\freetype\\",
			"D:\\work\\programming\\color-c\\src, -freetype\\*",
			"D:\\work\\programming\\color-c\\src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"SetCamera",
			"Push",
			"ui",
			"mouse_focus_taken",
			"TakeMouseFocus",
			"MouseFocusTaken",
			"state.",
			"DrawFrametimes",
			"padding",
			"entry_data_buffer",
			"RingBuffer",
			"->hud",
			"hud",
			"unit_slots",
			"CreateUnit",
			"CombineUnit",
			"rooms =",
			"room",
			"state =",
			"draw unit",
			"TraitSet",
			"hovered_node_index",
			"enum class Team",
			"struct UnitSet",
			"UnitFrom",
			"Button(",
			"dk_grey",
			"Draw",
			"MousePos()",
			"dragging_index",
			"SizeUiText",
			"DrawText",
			"ButtonLayout",
			"ReleaseMutex",
			"AddWorkEn",
			"AllocArena",
			"crit",
			"mutex",
			"platform",
			"debug_container",
			"platform_input",
			"InputState",
			"debug_container",
			"debug_overlay",
			"Draw",
			"layer",
			"mutex",
			".\n",
			"speed",
			"CreateWorkQueue",
			"Map Generation",
			"DrawArena",
			"ArenaFromId",
			"TableFromId",
			"CreateArrayFromArena",
			"speed",
			"g_work_queue_system",
			"THREAD_GenerateNodeGraph",
			"SizeTextUtf32",
			"ScratchString",
			"ValidArray",
			"StepNodeGraphForceSimulation",
			"id",
			"GetUnitFromId",
			"String",
			"Texture",
			"struct Texture",
			"1600",
			"BARRIER",
			"0",
			"blur_shader",
			"severity = 0x",
			"FRAME START",
			"blur_dst_texture",
			"opengl",
			"BindTexture",
			"ActiveTexture",
			"256",
			"vsprintf",
			"SHADER",
			"BindFragDataLocation",
			"SwapBuffers",
			"RectTopLeft",
			"AbilityInfoBox",
			"response.",
			"response.rect",
			"Pad",
			"lt_blue",
			"`red`",
			"gold",
			"DrawText",
			"SizeText",
			"align_",
			"selected_ability",
			"aligned_child.size",
			"aligned_child.pos",
			".x",
			"AlignRect",
			"SizeText",
			"align_topleft",
			"align_left",
			"hover_ui_draw_depth",
			"caster",
			"end_turn_button_rect",
			"DoAi",
			"DrawDirectedLine2",
			"DrawLine",
			"state =",
			"viud",
			"UnitAbilityPotential",
			"armor",
			"thought",
			"DrawAbilityInfo",
			"CalculateAbilityPotentialWithCurrentTraits",
			"vigor",
			"BattleScore",
			"2(",
			"best_score",
			"Score",
			"AbilityInfo",
			"total_option_count",
			"ScoreBattleState2",
			"DoAi",
			"ability.",
			"Score",
			"struct TraitSet",
			"TraitSet",
			"tiers +="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"state->",
			"game->debug_overlay.dragging_index",
			"",
			"padded_button_rect",
			"child_size",
			"child_pos",
			".y",
			"unit",
			"focus",
			"armor",
			"ability->",
			"armor",
			"focus",
			".focus",
			"end",
			"start",
			"focus",
			"armor",
			"focus",
			"",
			"ai::",
			"p",
			"battle->intents",
			"graph.",
			"vec",
			"camera.",
			"camera->",
			".y",
			"end",
			"rect",
			"queue",
			"/",
			"graph->",
			"b",
			"a",
			"graph",
			"b",
			"a",
			"graph",
			"params",
			".b",
			".a",
			"graph",
			", edge_percent, &t, &u",
			", edge_percent, &t, &t",
			"cam_move_speed",
			"fprintf(&",
			"in_file",
			"KeyBind keybind",
			"LineHeight",
			"tier.",
			"tc",
			"GetIndexFromName",
			"selected",
			"tc",
			"input",
			"ipnut",
			"UnitSet",
			"FromId",
			"ability_ids",
			"breed",
			"Breed",
			"",
			"Id",
			"FromId",
			"id",
			"AllocArena",
			"",
			"Table",
			"UnitSet",
			"(int)AbilityPropertyIndex",
			"].text.length",
			"editor->input_elements",
			"search_panel_layout",
			"TokenType_",
			"*p",
			"active_string->",
			"active_string",
			"#include \"utf32string.h\"",
			"char",
			"",
			"//log",
			"Utf32String",
			"Utf32FixedString",
			"arena->",
			"arena",
			"caster",
			"DamageIgnoreArmor",
			"ability->",
			"requires",
			"TokenMatchesString(token,",
			"-",
			"EffectParams_",
			">",
			"valid",
			"lcg->",
			"battle->",
			"layout.font->",
			"damage",
			"timer->max",
			"timer->min",
			"timer->speed",
			"battle->",
			"all_targets_clean",
			"target.",
			"c::max_battle",
			"char_size.y",
			"char_size.x",
			"font.face",
			"FAST_FUNCTION",
			"SLOW_FUNCTION",
			"OPTIMIZING_FUNCTION",
			"FASTSLOW_FUNCTION",
			"font->",
			"entry->",
			"Length(traitset_string)",
			", ",
			"fullscreen_",
			"align.y == AlignY",
			"trait_layout",
			"layout.face",
			"layout.font_size",
			"focus",
			"armor",
			"trait_text_size,",
			"focus",
			"armor",
			"game->selected_unit"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/text_render.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30966,
						"regions":
						{
						},
						"selection":
						[
							[
								14366,
								14366
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5727.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "_/todo.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9333,
						"regions":
						{
						},
						"selection":
						[
							[
								7250,
								7250
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1343.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/input.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2721,
						"regions":
						{
						},
						"selection":
						[
							[
								2451,
								2451
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1427.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11854,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										125,
										140
									],
									[
										240,
										255
									],
									[
										544,
										559
									],
									[
										882,
										897
									],
									[
										1152,
										1166
									],
									[
										1443,
										1457
									],
									[
										1812,
										1826
									],
									[
										2011,
										2025
									],
									[
										2225,
										2239
									],
									[
										2421,
										2435
									],
									[
										2632,
										2646
									],
									[
										2984,
										3001
									],
									[
										3016,
										3033
									],
									[
										3175,
										3192
									],
									[
										3252,
										3269
									],
									[
										3400,
										3417
									],
									[
										3507,
										3524
									],
									[
										3789,
										3806
									],
									[
										3825,
										3842
									],
									[
										4185,
										4202
									],
									[
										4477,
										4481
									],
									[
										4687,
										4691
									],
									[
										4815,
										4819
									],
									[
										4990,
										4994
									],
									[
										5345,
										5349
									],
									[
										5396,
										5400
									],
									[
										5462,
										5466
									],
									[
										5889,
										5893
									],
									[
										5940,
										5944
									],
									[
										6006,
										6010
									],
									[
										6200,
										6204
									],
									[
										6514,
										6518
									],
									[
										6972,
										6976
									],
									[
										7231,
										7235
									],
									[
										7530,
										7539
									],
									[
										7769,
										7778
									],
									[
										7972,
										7981
									],
									[
										8032,
										8041
									],
									[
										8317,
										8326
									],
									[
										8451,
										8460
									],
									[
										8515,
										8524
									],
									[
										8761,
										8770
									],
									[
										8839,
										8848
									],
									[
										9065,
										9074
									],
									[
										9234,
										9243
									],
									[
										9305,
										9314
									],
									[
										9504,
										9513
									],
									[
										9555,
										9564
									],
									[
										9640,
										9649
									],
									[
										9844,
										9853
									],
									[
										9926,
										9935
									],
									[
										10032,
										10041
									],
									[
										10094,
										10103
									],
									[
										10216,
										10225
									],
									[
										10278,
										10287
									],
									[
										10410,
										10419
									],
									[
										10474,
										10483
									],
									[
										10629,
										10638
									],
									[
										10741,
										10750
									],
									[
										10986,
										10995
									],
									[
										11229,
										11238
									],
									[
										11287,
										11296
									],
									[
										11532,
										11541
									],
									[
										11570,
										11579
									],
									[
										11679,
										11688
									],
									[
										11739,
										11748
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								9072,
								9072
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 5,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2717.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/draw.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7406,
						"regions":
						{
						},
						"selection":
						[
							[
								850,
								850
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 229.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/win32_platform.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29404,
						"regions":
						{
						},
						"selection":
						[
							[
								26539,
								26539
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10582.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/debug_overlay.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 456,
						"regions":
						{
						},
						"selection":
						[
							[
								125,
								125
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/const.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19674,
						"regions":
						{
						},
						"selection":
						[
							[
								589,
								589
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/camera.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1883,
						"regions":
						{
						},
						"selection":
						[
							[
								1196,
								1196
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 351.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/camera.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 485,
						"regions":
						{
						},
						"selection":
						[
							[
								485,
								485
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/game_code_include.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1291,
						"regions":
						{
						},
						"selection":
						[
							[
								618,
								618
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/platform_include.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 916,
						"regions":
						{
						},
						"selection":
						[
							[
								916,
								916
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 12,
					"file": "src/frametimes_draw.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2629,
						"regions":
						{
						},
						"selection":
						[
							[
								1855,
								1855
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 421.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/frametimes_draw.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 187,
						"regions":
						{
						},
						"selection":
						[
							[
								60,
								79
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/game.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20757,
						"regions":
						{
						},
						"selection":
						[
							[
								15600,
								15600
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3406.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "src/text_render.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30966,
						"regions":
						{
						},
						"selection":
						[
							[
								5270,
								5270
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1853.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/camera.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 485,
						"regions":
						{
						},
						"selection":
						[
							[
								60,
								60
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/input.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2721,
						"regions":
						{
						},
						"selection":
						[
							[
								2594,
								2594
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1408.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/input.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1482,
						"regions":
						{
						},
						"selection":
						[
							[
								1326,
								1326
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 351.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/draw.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7406,
						"regions":
						{
						},
						"selection":
						[
							[
								5965,
								5965
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2608.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/game.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1759,
						"regions":
						{
						},
						"selection":
						[
							[
								532,
								532
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/game_code_include.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1291,
						"regions":
						{
						},
						"selection":
						[
							[
								1291,
								1291
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 134.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/debug_overlay.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 456,
						"regions":
						{
						},
						"selection":
						[
							[
								234,
								234
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.47375,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 213.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/buildbat.sublime-build",
	"project": "color-c.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"plat",
				"src\\platform_include.cpp"
			],
			[
				"textre",
				"src\\text_render.cpp"
			],
			[
				"inc",
				"src\\game_code_include.cpp"
			],
			[
				"camera",
				"src\\camera.cpp"
			],
			[
				"text",
				"src\\text_render.cpp"
			],
			[
				"con",
				"src\\const.h"
			],
			[
				"draw",
				"src\\draw.cpp"
			],
			[
				"inputc",
				"src\\input.cpp"
			],
			[
				"input",
				"src\\input.cpp"
			],
			[
				"todo",
				"_\\todo.txt"
			],
			[
				"inclu",
				"src\\game_code_include.cpp"
			],
			[
				"dbeugover",
				"src\\debug_overlay.h"
			],
			[
				"gameh",
				"src\\game.h"
			],
			[
				"win32",
				"src\\win32_platform.cpp"
			],
			[
				"gamec",
				"src\\game.cpp"
			],
			[
				"const",
				"src\\const.h"
			],
			[
				"logt",
				"logs\\log.txt"
			],
			[
				"log",
				"src\\log.cpp"
			],
			[
				"vec",
				"src\\vec.cpp"
			],
			[
				"mem",
				"src\\memory.cpp"
			],
			[
				"util",
				"src\\util.cpp"
			],
			[
				"array",
				"src\\array.h"
			],
			[
				"buffer",
				"src\\ring_buffer.cpp"
			],
			[
				"win",
				"src\\win32_platform.cpp"
			],
			[
				"include",
				"src\\game_code_include.cpp"
			],
			[
				"mat",
				"src\\math.cpp"
			],
			[
				"table",
				"src\\table.h"
			],
			[
				"tabl",
				"src\\table.cpp"
			],
			[
				"unit",
				"src\\unit.cpp"
			],
			[
				"abili",
				"data\\ability.dat"
			],
			[
				"bree",
				"data\\breed.dat"
			],
			[
				"main",
				"src\\main_menu.cpp"
			],
			[
				"gamesta",
				"src\\game_state.h"
			],
			[
				"game",
				"src\\game.cpp"
			],
			[
				"battle",
				"src\\battle.cpp"
			],
			[
				"batt",
				"src\\battle.cpp"
			],
			[
				"camp",
				"src\\campaign.h"
			],
			[
				"room",
				"src\\room.h"
			],
			[
				"bb",
				"build\\b.bat"
			],
			[
				"imgui",
				"src\\imgui.h"
			],
			[
				"nodegra",
				"src\\node_graph.cpp"
			],
			[
				"textrend",
				"src\\text_render.cpp"
			],
			[
				"debugover",
				"src\\debug_overlay.h"
			],
			[
				"crit",
				"logs\\critical.log"
			],
			[
				"workque",
				"src\\win32_work_queue.h"
			],
			[
				"tod",
				"_\\todo.txt"
			],
			[
				"pool",
				"src\\pool.cpp"
			],
			[
				"imguih",
				"src\\imgui.h"
			],
			[
				"memor",
				"src\\memory.cpp"
			],
			[
				"iguih",
				"src\\imgui.h"
			],
			[
				"node",
				"src\\node_graph.cpp"
			],
			[
				"memoryd",
				"src\\memory_draw.cpp"
			],
			[
				"win32work",
				"src\\win32_work_queue.cpp"
			],
			[
				"worke",
				"src\\work_entry.h"
			],
			[
				"enemyai",
				"src\\enemy_ai.cpp"
			],
			[
				"utf32",
				"src\\utf32string.cpp"
			],
			[
				"string",
				"src\\string.cpp"
			],
			[
				"edit",
				"src\\editor.cpp"
			],
			[
				"textpars",
				"src\\text_parsing.cpp"
			],
			[
				"textpar",
				"src\\text_parsing.h"
			],
			[
				"strinh",
				"src\\string.h"
			],
			[
				"memr",
				"src\\memory.cpp"
			],
			[
				"memry",
				"src\\memory.cpp"
			],
			[
				"lo",
				"logs\\log.txt"
			],
			[
				"memorydarw",
				"src\\memory_draw.cpp"
			],
			[
				"work",
				"src\\work_entry.h"
			],
			[
				"workqu",
				"src\\win32_work_queue.h"
			],
			[
				"win32w",
				"src\\win32_work_queue.cpp"
			],
			[
				"b",
				"build\\b.bat"
			],
			[
				"tableh",
				"src\\table.h"
			],
			[
				"gam",
				"src\\game.cpp"
			],
			[
				"tab",
				"src\\table.cpp"
			],
			[
				"lot",
				"logs\\log.txt"
			],
			[
				"arra",
				"src\\array.cpp"
			],
			[
				"timin",
				"logs\\DebugTimings.txt"
			],
			[
				"cam",
				"src\\campaign.cpp"
			],
			[
				"utf",
				"src\\utf32string.cpp"
			],
			[
				"str",
				"src\\string.cpp"
			],
			[
				"ene",
				"src\\enemy_ai.cpp"
			],
			[
				"better",
				"src\\better_text_parsing.cpp"
			],
			[
				"bat",
				"src\\battle.cpp"
			],
			[
				"memory",
				"src\\memory.cpp"
			],
			[
				"memo",
				"src\\memory.h"
			],
			[
				"ndo",
				"src\\node_graph.cpp"
			],
			[
				"ga",
				"src\\game.cpp"
			],
			[
				"outline",
				"src\\shader\\outline.cs.glsl"
			],
			[
				"cnost",
				"src\\const.h"
			],
			[
				"drawh",
				"src\\draw.h"
			],
			[
				"metaprint",
				"src\\meta_print.cpp"
			],
			[
				"meta",
				"src\\meta.cpp"
			],
			[
				"opengl",
				"src\\opengl.h"
			],
			[
				"open",
				"src\\opengl.cpp"
			],
			[
				"blur",
				"src\\shader\\gaussian_blur.cs.glsl"
			],
			[
				"openglh",
				"src\\opengl.h"
			],
			[
				"color",
				"src\\color_vertex.glsl"
			],
			[
				"uv",
				"src\\uv_fragment.glsl"
			],
			[
				"win32_work",
				"src\\win32_work_queue.cpp"
			],
			[
				"logcp",
				"src\\log.cpp"
			],
			[
				"ogc",
				"build\\freetype-2.9.1\\builds\\os2\\os2-gcc.mk"
			],
			[
				"uv_fra",
				"src\\uv_fragment.glsl"
			],
			[
				"uv_ver",
				"src\\uv_vertex.glsl"
			],
			[
				"vertex",
				"src\\color_vertex.glsl"
			],
			[
				"gauss",
				"src\\shader\\gaussian_blur.vs.glsl"
			],
			[
				"guas",
				"src\\shader\\gaussian_blur.vs.glsl"
			],
			[
				"color_fra",
				"src\\color_fragment.glsl"
			],
			[
				"openg",
				"src\\opengl.cpp"
			],
			[
				"test",
				"src\\test_mode.cpp"
			],
			[
				"textren",
				"src\\text_render.h"
			],
			[
				"ai",
				"src\\enemy_ai.cpp"
			],
			[
				"ability",
				"data\\ability.dat"
			],
			[
				"abi",
				"src\\ability.cpp"
			],
			[
				"abilityh",
				"src\\ability.h"
			],
			[
				"stringh",
				"src\\string.h"
			],
			[
				"onst",
				"src\\const.h"
			],
			[
				"plaf",
				"src\\platform_include.cpp"
			],
			[
				"geomr",
				"src\\geometry.cpp"
			],
			[
				"math",
				"src\\math.cpp"
			],
			[
				"arrayc",
				"src\\array.cpp"
			],
			[
				"aiex",
				"src\\ai_explorer.h"
			],
			[
				"game state",
				"src\\game_state.h"
			],
			[
				"breed",
				"data\\breed.dat"
			],
			[
				"abilitd",
				"data\\ability.dat"
			],
			[
				"abilty",
				"data\\ability.dat"
			],
			[
				"abilitydat",
				"data\\ability.dat"
			],
			[
				"abilt",
				"src\\ability.h"
			],
			[
				"abilityd",
				"data\\ability.dat"
			],
			[
				"Traitset",
				"src\\traitset.h"
			],
			[
				"effect",
				"src\\effect.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 198.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
