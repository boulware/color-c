// 1) Fully implement turns (*AP restrictions, end turn button, enemies use abilities on their turn and then pass turn back)
// 2) Enemy intent icons (hovering over shows the action preview) (have a full enemy turn intent icon above all the single intent icons which shows the overall result of all enemy actions?)

3) Allow abilities to use multiple target sets
e.g.: in the ability data files, use a '^' to indicate that the effect on this line
      will refer to the same target that the previous effect did.
      This seems like a clean syntax that allows multiple target sets in the
      same ability *AND* still lets us apply multiple effects to the same target
      without too much syntax overhead.

...
ability "Strike"
tier 0
requires (0,0,0)
effect Damage single_unit (1,0,0)
effect Heal ^ (0,1,0)
effect Freeze ^
effect Heal all_allies (0,5,0)
...

3a) Similar: For more complex effect chains where, for example -- you Restore 1 focus and then steal 2 focus from the same target -- we don't currently support that properly at the moment because the steal amount is calculated before the restore is applied, so it will be inaccurate in some cases. There's a related question of whether we want to track whether battle events/triggers happen simulatenously or one after another, which may affect how triggers play out in some circumstances.

4) Effects could be single-inheritance instead of using a void* to effect parameters? Not sure which road I want to go down here. AOWTC it's a void*, but it's just a little spooky. Even a union is an option, but it might be even worse than a void*.

5) Units dying in battles.

6) Enemy AI

// 7) Snap preview fade in/out when a new target is hovered. This happens when...
//     * A new unit/ability combination is hovered, which happens in a few different cases:
//         - The selected ability doesn't change, but the mouse is moved to a different unit
//           than the previous frame
//         - A new ability is selected with the QWER hotkeys (this is easily fixed by just resetting
//           the timer when a new ability is selected)

// 8) Framestep

// 9) Make issuing draw calls in the platform layer work properly (DrawText(), DrawRect(), etc.)

10) Battle restart with button

//11) Hovering ability buttons will "passthrough" the HUD and hover units if you're in the right spot.

12) Have a struct tag that tells the meta program not to write an implementation for a particular struct, so I can write a handwritten one instead (useful for things like String)

13) Interactable/collapsible/expandable meta string stuff

14) Depth count tab formatting for MetaString()

15) Align +1/-1 on right side for preview values so the 1s line up instead of the + and -

16) At some may point, implementing a proper pool as a replacement for table may be the proper solution if we have very transient entries -- aowtc, if an entry is deleted from a Table, the next entry will simply be created at the end of the table, and the index of the deleted entry will just be dead memory for the remainder of runtime. This isn't really an issue for the way I currently use tables (loading stuff from disk once and not really modifying it much), but if we have pools of objects that are more transient, this is something that needs to be addressed.

17) Properly implement scancodes and related things so I can do things like differentiate between left and right alt (see MSDN MapVirtualKey())

//18) Mouse panning doesn't work properly when zoomed in or out.

19) Fix mouse zooming in map so the cursor is a fixed point. (Or maybe don't? It doesn't seem too bad atm)

// 20) Fix drawing "TARGET" in red (yellow, orange work, but red doesn't work [which should be drawn when a unit is part of the inferred target set])

21) For preview damage that does more than the target's current trait value (e.g., an ability deals 10 vigor damage, but the target only has 5 vigor), we should probably show the full damage (10) rather than the reduced damage (5) because when you're doing something like healing to tank the damage, it's hard to read what's going on because the damage value changes with your health (e.g., you're at 5 vigor, it shows -5, you heal 2 damage thinking that it will save you because you will then have 7 vigor vs 5 damage, but then the damage value changes to 7)

//22) Cache the values of UnitAbilityPotential() for the tier potential value.

23) Meditate (for example) can be "clicked" on an enemy and it will just do nothing but use up AP? Probably the case with all self-targeting things if i had to guess.

24) Develop a better way to compare two scores.

25) Make iteration on UI stuff faster -- because it's a very difficult design part of the game, and we need to do lots of changes fast to see what will work as an effective way to communicate relevant information to the player. Visual editor? Better API?