// 1) Fully implement turns (*AP restrictions, end turn button, enemies use abilities on their turn and then pass turn back)
// 2) Enemy intent icons (hovering over shows the action preview) (have a full enemy turn intent icon above all the single intent icons which shows the overall result of all enemy actions?)

3) Allow abilities to use multiple target sets
e.g.: in the ability data files, use a '^' to indicate that the effect on this line
      will refer to the same target that the previous effect did.
      This seems like a clean syntax that allows multiple target sets in the
      same ability *AND* still lets us apply multiple effects to the same target
      without too much syntax overhead.

...
ability "Strike"
tier 0
requires (0,0,0)
effect Damage single_unit (1,0,0)
effect Heal ^ (0,1,0)
effect Freeze ^
effect Heal all_allies (0,5,0)
...

3a) Similar: For more complex effect chains where, for example -- you Restore 1 focus and then steal 2 focus from the same target -- we don't currently support that properly at the moment because the steal amount is calculated before the restore is applied, so it will be inaccurate in some cases. There's a related question of whether we want to track whether battle events/triggers happen simulatenously or one after another, which may affect how triggers play out in some circumstances.

4) Effects could be single-inheritance instead of using a void* to effect parameters? Not sure which road I want to go down here. AOWTC it's a void*, but it's just a little spooky. Even a union is an option, but it might be even worse than a void*.

//5) Units dying in battles.

6) Enemy AI

// 7) Snap preview fade in/out when a new target is hovered. This happens when...
//     * A new unit/ability combination is hovered, which happens in a few different cases:
//         - The selected ability doesn't change, but the mouse is moved to a different unit
//           than the previous frame
//         - A new ability is selected with the QWER hotkeys (this is easily fixed by just resetting
//           the timer when a new ability is selected)

// 8) Framestep

// 9) Make issuing draw calls in the platform layer work properly (DrawText(), DrawRect(), etc.)

10) Battle restart with button

//11) Hovering ability buttons will "passthrough" the HUD and hover units if you're in the right spot.

// 12) Have a struct tag that tells the meta program not to write an implementation for a particular struct, so I can write a handwritten one instead (useful for things like String)

13) Interactable/collapsible/expandable meta string stuff

14) Depth count tab formatting for MetaString()

15) Align +1/-1 on right side for preview values so the 1s line up instead of the + and -

16) At some may point, implementing a proper pool as a replacement for table may be the proper solution if we have very transient entries -- aowtc, if an entry is deleted from a Table, the next entry will simply be created at the end of the table, and the index of the deleted entry will just be dead memory for the remainder of runtime. This isn't really an issue for the way I currently use tables (loading stuff from disk once and not really modifying it much), but if we have pools of objects that are more transient, this is something that needs to be addressed.

17) Properly implement scancodes and related things so I can do things like differentiate between left and right alt (see MSDN MapVirtualKey())

//18) Mouse panning doesn't work properly when zoomed in or out.

19) Fix mouse zooming in map so the cursor is a fixed point. (Or maybe don't? It doesn't seem too bad atm)

// 20) Fix drawing "TARGET" in red (yellow, orange work, but red doesn't work [which should be drawn when a unit is part of the inferred target set])

21) For preview damage that does more than the target's current trait value (e.g., an ability deals 10 vigor damage, but the target only has 5 vigor), we should probably show the full damage (10) rather than the reduced damage (5) because when you're doing something like healing to tank the damage, it's hard to read what's going on because the damage value changes with your health (e.g., you're at 5 vigor, it shows -5, you heal 2 damage thinking that it will save you because you will then have 7 vigor vs 5 damage, but then the damage value changes to 7)

//22) Cache the values of UnitAbilityPotential() for the tier potential value.

23) Meditate (for example) can be "clicked" on an enemy and it will just do nothing but use up AP? Probably the case with all self-targeting things if i had to guess.

24) Develop a better way to compare two scores (enemy AI).

25) Make iteration on UI stuff faster -- because it's a very difficult design part of the game, and we need to do lots of changes fast to see what will work as an effective way to communicate relevant information to the player. Visual editor? Better API?

//26) Going into campaign and back to main menu destroys the main menu strings. Permanent arena being overwritten? [Main menu state was allocating its strings from the temp arena because of a default parameter to StringFromCString, rather than the strings allocating data from the same arena as their containing array]

//27) Should our struct Array<Type> store an (Arena *) or an Id<Arena>? I think storing a raw pointer is OK here, since we don't expect to be doing much fiddling with the arena of an array in userspace code, and adding the overhead of a table lookup (although it is rather small, something like 200 cycles last time I checked) every time we need to resize the array (which, admittedly probably won't be happening too much with the way the game is currently structured) may not be what we want -- we need to look at the (dis)advantages of having that slight bit of extra safety and see if it's relevant for this game. AOWTC, it is a raw pointer, and I can't think of any IMMEDIATE issues this will cause. [I decided to use an Id<Arena>, because I didn't want to have to have overloads for everything that
arrays might use -- this did cause some clear overhead (frametime increased visibly -- only by about 0.1ms or so -- but it's impossible to tell if that was a multiplicative increase or an absolute increase -- if it's an absolute increase, it's probably not a big deal, but if it's a multiplicative increase that could become an issue in the future as frametimes get longer. I think it's unlikely that it's a multiplicative increase, but we should keep this thing in mind for the future when we're looking for performance tweaks)]

//28) Because we have memory::arena_table as a global, there are two different versions of it, which means that IDs are no longer unique. If we pass a table ID from the game layer into the platform layer or vice-versa, that table ID is no longer correct because it will refer to a location in the other compilation unit's memory::arena_table -- the solution here is likely to NOT use the arena_table as a global, but instead to put it in the platform layer and give the game a reference to it, perhaps similar to what we do with input -- the game struct just has a pointer that points to the arena_table, which is global in the platform layer, but doesn't exist in the game layer as a global.

29) Because of the way our Table currently works, any arenas that are created for temporary use and then deleted will quickly run the arena_table to its end, because it doesn't try to track which entries are not in use. We could do a somewhat simple fix to this which would be running through the whole table and checking for the first non-active entry to place a new entry, or we could create a new data structure like a pool which might track entries in a more explicit way; e.g., a linked list of all currently free inactive entry slots.

30) We need to do something about AllocArena and make it be able to do interlocked allocations (same thing for free) into the arena_table, because DoNextEntryOnWorkQueue() will run in multiple threads potentially simultaneously and have overlapping AllocArena() or FreeArena() calls, which will have inherent race conditions.

31) Can we actually call something like Log() from a threaded function? E.g., in AllocArena(), if we call Log(), will it actually work, or will it do some weird things? I need to think about it more.

// 32) Somewhat frequent (1/30 runs) in AllocArena. Almost certainly MT issue. CreateEntry() is returning a bogus arena_id for some reason -- when I immediately call GetEntryFromId(), I get a nullptr instead of an actual entry that I expected. A temporary fix is possible where we just cancel the thread execution when we fail to get a proper temp thread arena and try to restart it, but it's not an ideal fix. [We had buffer overflow issues with the entry array in WorkQueues, which we fixed, and that MIGHT have been the source of the issue, rather than being a MT one -- well we did add some mutexes as well for ArenaPool access, so it's hard to know exactly -- and we changed the model so that we're only allocating arenas at work queue creation time rather than every time a thread is fired off, which reduces the amount of lockstep we need to have when firing off tons of threads at once -- I'm not completely sure what the cause was, but I think this particular issue is mostly fixed with the new implementation]

// 33) Track GPU time in addition to "CPU time" (what we call frametime now) -- frametime should consider GPU time as well, and it currently does not.

34) Text rendering is probably fast enough right now, but it would be a pretty easy fix to do the texture atlas and I think it would probably help significantly with GPU performance -- we don't know how long the GPU is actually taking, but large amounts of text do cause significant frametime increases (on the GPU, not CPU) -- it's a simple fix that we should probably do at some point just so we have the most amount of GPU time to work with as we can.

35) Default arena for arrays that were not properly initialized, and having some proper fallback behavior for uninit'd arrays (like just lazy allocating from the default arena if we have user-level code that is trying to add elements to an array that has no memory allocated), and then we can just reserve this default arena (id=0) so that we can catch anything trying to allocate from it and deal with it explicitly -- but in the case that something DOES need to allocate memory without being properly init'd, it will still be able to do so reasonably safely.

36) Convert ability_ids array member of struct Breed and struct Unit to an Array<AbilityId>

37) Fix unit hotkeys in battle -- because the first 4 slots are no longer guaranteed to be allies, we need a different way of handling it.

38) If we spam campaign map threads, we will get huge frame spikes every so often (up to anywhere around 15ms) -- unknown cause -- probably worth investigating, especially after we have tools for analysing particular frames to see where cycles went. This is relatively low priority for now since it doesn't seem to happen when we're not really spamming them, and even if it does, it's a small frame hitch for only 1 frame and it's just during map generation -- but(!) at some point it may start showing up in other things, so tracking down the issue is likely a good idea at some point.

39) More of a note (in commit 7ac01af69cb57f82a8cfaab2bb87a7a389d29e7a): we said in this commit that we didn't find the root of the bug, but I think in fixing the entry overflow thing (where the next_entry_to_write would go past the end of a queue's entry array) may have been related -- I'm not totally sure about this, but that could have been the reason that we were seeing invalid arena_id's at various points.

//40) Our LCG isn't actually random. e.g., RandomU32(0,1) tends to alternate 0,1,0,1,0,1,... [fixed by changing our lcg.m back to something I got from... somewhere. It was 0xFFFFFFFF or 0xFFFFFFFE, but those produce very periodic results -- this is still potentially problematic because now we don't have the full range of U32 -- so when we do things like produce random floats we have to scale to the lcg.m rather than 0xFFFFFFFF. Or if we want random U32s larger than our m [which is a good amount smaller than 0xFFFFFFFF], we have issues. We could always fix this by going to a 64-bit LCG, which should give us plenty of room for things we want to do.)

41) WorkQueue visualization

42) Actually implement enemy AI with the (janky) system we have now, so that the enemies will perform those actions.

43) Battle arrows point from ability box rather than unit slot box.